
iambic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000a6c  00000b00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800102  00800102  00000b02  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000b02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000b58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f2a  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001097  00000000  00000000  00002bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020a7  00000000  00000000  00003c51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00005cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000951  00000000  00000000  00005f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000121d  00000000  00000000  00006879  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00007a96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c1       	rjmp	.+714    	; 0x2cc <__ctors_end>
   2:	00 00       	nop
   4:	7e c1       	rjmp	.+764    	; 0x302 <__bad_interrupt>
   6:	00 00       	nop
   8:	7c c1       	rjmp	.+760    	; 0x302 <__bad_interrupt>
   a:	00 00       	nop
   c:	7a c1       	rjmp	.+756    	; 0x302 <__bad_interrupt>
   e:	00 00       	nop
  10:	78 c1       	rjmp	.+752    	; 0x302 <__bad_interrupt>
  12:	00 00       	nop
  14:	76 c1       	rjmp	.+748    	; 0x302 <__bad_interrupt>
  16:	00 00       	nop
  18:	74 c1       	rjmp	.+744    	; 0x302 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	72 c1       	rjmp	.+740    	; 0x302 <__bad_interrupt>
  1e:	00 00       	nop
  20:	70 c1       	rjmp	.+736    	; 0x302 <__bad_interrupt>
  22:	00 00       	nop
  24:	6e c1       	rjmp	.+732    	; 0x302 <__bad_interrupt>
  26:	00 00       	nop
  28:	07 c3       	rjmp	.+1550   	; 0x638 <__vector_10>
  2a:	00 00       	nop
  2c:	76 c3       	rjmp	.+1772   	; 0x71a <__vector_11>
  2e:	00 00       	nop
  30:	68 c1       	rjmp	.+720    	; 0x302 <__bad_interrupt>
  32:	00 00       	nop
  34:	66 c1       	rjmp	.+716    	; 0x302 <__bad_interrupt>
  36:	00 00       	nop
  38:	64 c1       	rjmp	.+712    	; 0x302 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	62 c1       	rjmp	.+708    	; 0x302 <__bad_interrupt>
  3e:	00 00       	nop
  40:	60 c1       	rjmp	.+704    	; 0x302 <__bad_interrupt>
  42:	00 00       	nop
  44:	5e c1       	rjmp	.+700    	; 0x302 <__bad_interrupt>
  46:	00 00       	nop
  48:	5c c1       	rjmp	.+696    	; 0x302 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5a c1       	rjmp	.+692    	; 0x302 <__bad_interrupt>
  4e:	00 00       	nop
  50:	58 c1       	rjmp	.+688    	; 0x302 <__bad_interrupt>
  52:	00 00       	nop
  54:	56 c1       	rjmp	.+684    	; 0x302 <__bad_interrupt>
  56:	00 00       	nop
  58:	54 c1       	rjmp	.+680    	; 0x302 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	52 c1       	rjmp	.+676    	; 0x302 <__bad_interrupt>
  5e:	00 00       	nop
  60:	50 c1       	rjmp	.+672    	; 0x302 <__bad_interrupt>
  62:	00 00       	nop
  64:	4e c1       	rjmp	.+668    	; 0x302 <__bad_interrupt>
  66:	00 00       	nop
  68:	4c c1       	rjmp	.+664    	; 0x302 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4a c1       	rjmp	.+660    	; 0x302 <__bad_interrupt>
  6e:	00 00       	nop
  70:	48 c1       	rjmp	.+656    	; 0x302 <__bad_interrupt>
  72:	00 00       	nop
  74:	46 c1       	rjmp	.+652    	; 0x302 <__bad_interrupt>
  76:	00 00       	nop
  78:	44 c1       	rjmp	.+648    	; 0x302 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	42 c1       	rjmp	.+644    	; 0x302 <__bad_interrupt>
  7e:	00 00       	nop
  80:	40 c1       	rjmp	.+640    	; 0x302 <__bad_interrupt>
  82:	00 00       	nop
  84:	3e c1       	rjmp	.+636    	; 0x302 <__bad_interrupt>
  86:	00 00       	nop
  88:	3c c1       	rjmp	.+632    	; 0x302 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3a c1       	rjmp	.+628    	; 0x302 <__bad_interrupt>
  8e:	00 00       	nop
  90:	38 c1       	rjmp	.+624    	; 0x302 <__bad_interrupt>
  92:	00 00       	nop
  94:	36 c1       	rjmp	.+620    	; 0x302 <__bad_interrupt>
  96:	00 00       	nop
  98:	34 c1       	rjmp	.+616    	; 0x302 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	32 c1       	rjmp	.+612    	; 0x302 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	30 c1       	rjmp	.+608    	; 0x302 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	2e c1       	rjmp	.+604    	; 0x302 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2c c1       	rjmp	.+600    	; 0x302 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__trampolines_end>:
  ac:	21 21       	and	r18, r1
  ae:	21 0a       	sbc	r2, r17
  b0:	Address 0x00000000000000b0 is out of bounds.


000000b1 <__c.1924>:
  b1:	20 3d 20 00                                          = .

000000b5 <morse.1901>:
  b5:	00 00 08 17 0c 04 11 10 16 18 15 1a 07 0e 0a 12     ................
  c5:	0b 19 09 00 0f 00 13 0d 05 1b 06 1c 1d 14 00 00     ................
  d5:	22 21 00 20 00 00 00 1f a4 00 ae 00 00 00 00 1e     "!. ............
  e5:	23 2e 38 00 00 00 a6 00 24 00 00 00 25 00 26 27     #.8.....$...%.&'
  f5:	00 00 00 00 00 00 00 00 00 00 00 00 b8 ad 00 00     ................
 105:	00 00 b4 00 00 37 00 00 00 00 9f 00 00 00 34 00     .....7........4.
 115:	00 2d 00 00 00 00 00 00 00 00 33 9e 00 a7 00 00     .-........3.....
 125:	00 00 00 36 00 00 00 00 b3 00 00 00 00 00 00 00     ...6............
 135:	00 00 00 00 00 00 00 00 00 a1 00 00 00 00 00 00     ................
 145:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 155:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 165:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 175:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 185:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 195:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 1a5:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

000001b5 <__c.1914>:
 1b5:	2d 00                                               -.

000001b7 <__c.1910>:
 1b7:	2e 00                                               ..

000001b9 <descriptor_list>:
 1b9:	00 01 00 00 b1 02 12 00 02 00 00 22 02 3b 00 22     ...........".;."
 1c9:	00 00 72 02 3f 00 21 00 00 34 02 09 00 22 01 00     ..r.?.!..4..."..
 1d9:	5d 02 15 00 21 01 00 4d 02 09 00 03 00 00 1e 02     ]...!..M........
 1e9:	04 01 03 09 04 0c 02 10 02 03 09 04 f8 01 12        ...............

000001f8 <string2>:
 1f8:	12 03 4b 00 65 00 79 00 62 00 6f 00 61 00 72 00     ..K.e.y.b.o.a.r.
 208:	64 00 00 00                                         d...

0000020c <string1>:
 20c:	10 03 4d 00 66 00 67 00 4e 00 61 00 6d 00 65 00     ..M.f.g.N.a.m.e.
 21c:	00 00                                               ..

0000021e <string0>:
 21e:	04 03 09 04                                         ....

00000222 <config1_descriptor>:
 222:	09 02 3b 00 02 01 00 c0 32 09 04 00 00 01 03 01     ..;.....2.......
 232:	01 00 09 21 11 01 00 01 22 3f 00 07 05 83 03 08     ...!...."?......
 242:	00 01 09 04 01 00 01 03 00 00 00 09 21 11 01 00     ............!...
 252:	01 22 15 00 07 05 84 03 20 00 01                    ."...... ..

0000025d <debug_hid_report_desc>:
 25d:	06 31 ff 09 74 a1 53 75 08 15 00 26 ff 00 95 20     .1..t.Su...&... 
 26d:	09 75 81 02 c0                                      .u...

00000272 <keyboard_hid_report_desc>:
 272:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
 282:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
 292:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
 2a2:	75 08 15 00 25 68 05 07 19 00 29 68 81 00 c0        u...%h....)h...

000002b1 <device_descriptor>:
 2b1:	12 01 00 02 00 00 00 20 c0 16 7d 04 00 01 01 02     ....... ..}.....
 2c1:	00 01                                               ..

000002c3 <endpoint_config_table>:
 2c3:	00 00 01 c1 06 01 c1 26 00                          .......&.

000002cc <__ctors_end>:
 2cc:	11 24       	eor	r1, r1
 2ce:	1f be       	out	0x3f, r1	; 63
 2d0:	cf ef       	ldi	r28, 0xFF	; 255
 2d2:	da e0       	ldi	r29, 0x0A	; 10
 2d4:	de bf       	out	0x3e, r29	; 62
 2d6:	cd bf       	out	0x3d, r28	; 61

000002d8 <__do_copy_data>:
 2d8:	11 e0       	ldi	r17, 0x01	; 1
 2da:	a0 e0       	ldi	r26, 0x00	; 0
 2dc:	b1 e0       	ldi	r27, 0x01	; 1
 2de:	ec e6       	ldi	r30, 0x6C	; 108
 2e0:	fa e0       	ldi	r31, 0x0A	; 10
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <__do_copy_data+0x10>
 2e4:	05 90       	lpm	r0, Z+
 2e6:	0d 92       	st	X+, r0
 2e8:	a2 30       	cpi	r26, 0x02	; 2
 2ea:	b1 07       	cpc	r27, r17
 2ec:	d9 f7       	brne	.-10     	; 0x2e4 <__do_copy_data+0xc>

000002ee <__do_clear_bss>:
 2ee:	21 e0       	ldi	r18, 0x01	; 1
 2f0:	a2 e0       	ldi	r26, 0x02	; 2
 2f2:	b1 e0       	ldi	r27, 0x01	; 1
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <.do_clear_bss_start>

000002f6 <.do_clear_bss_loop>:
 2f6:	1d 92       	st	X+, r1

000002f8 <.do_clear_bss_start>:
 2f8:	a5 31       	cpi	r26, 0x15	; 21
 2fa:	b2 07       	cpc	r27, r18
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <.do_clear_bss_loop>
 2fe:	4f d0       	rcall	.+158    	; 0x39e <main>
 300:	b3 c3       	rjmp	.+1894   	; 0xa68 <_exit>

00000302 <__bad_interrupt>:
 302:	7e ce       	rjmp	.-772    	; 0x0 <__vectors>

00000304 <led_on>:
#define LED_PIN (1 << 6)

static inline void
led_on(void)
{
	PORTD |= LED_PIN;
 304:	5e 9a       	sbi	0x0b, 6	; 11
	DDRB |=  1 << 7; // OC0A enabled
 306:	27 9a       	sbi	0x04, 7	; 4
}
 308:	08 95       	ret

0000030a <led_off>:

static inline void
led_off(void)
{
	PORTD &= ~LED_PIN;
 30a:	5e 98       	cbi	0x0b, 6	; 11
	DDRB &=  ~(1 << 7); // OC0A disabled
 30c:	27 98       	cbi	0x04, 7	; 4
}
 30e:	08 95       	ret

00000310 <busy_wait>:

static void
busy_wait(
	uint16_t delay_ticks
)
{
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	0f 92       	push	r0
 316:	cd b7       	in	r28, 0x3d	; 61
 318:	de b7       	in	r29, 0x3e	; 62
	OCR1A = TCNT1 + delay_ticks;
 31a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 31e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 322:	82 0f       	add	r24, r18
 324:	93 1f       	adc	r25, r19
 326:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 32a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIFR1 |= (1 << OCF1A);
 32e:	b1 9a       	sbi	0x16, 1	; 22

	while (bit_is_clear(TIFR1, OCF1A))
 330:	b1 9b       	sbis	0x16, 1	; 22
 332:	04 c0       	rjmp	.+8      	; 0x33c <busy_wait+0x2c>
		if (is_dah(port))
			dah_count++;
		if (is_dit(port))
			dit_count++;
	}
}
 334:	0f 90       	pop	r0
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret
		const uint8_t port = PINB;
 33c:	23 b1       	in	r18, 0x03	; 3
		if (is_dah(port))
 33e:	29 83       	std	Y+1, r18	; 0x01
	return bit_is_clear(value, 4);
 340:	89 81       	ldd	r24, Y+1	; 0x01
		if (is_dah(port))
 342:	84 fd       	sbrc	r24, 4
 344:	09 c0       	rjmp	.+18     	; 0x358 <busy_wait+0x48>
			dah_count++;
 346:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dah_count>
 34a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dah_count+0x1>
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dah_count+0x1>
 354:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dah_count>
		if (is_dit(port))
 358:	29 83       	std	Y+1, r18	; 0x01
	return bit_is_clear(value, 5);
 35a:	89 81       	ldd	r24, Y+1	; 0x01
		if (is_dit(port))
 35c:	85 fd       	sbrc	r24, 5
 35e:	e8 cf       	rjmp	.-48     	; 0x330 <busy_wait+0x20>
			dit_count++;
 360:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dit_count>
 364:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <dit_count+0x1>
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <dit_count+0x1>
 36e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dit_count>
 372:	de cf       	rjmp	.-68     	; 0x330 <busy_wait+0x20>

00000374 <bad_input>:
}


static void
bad_input(void)
{
 374:	cf 93       	push	r28
	uint8_t tccr0b = TCCR0B;
 376:	c5 b5       	in	r28, 0x25	; 37
	TCCR0B = 0x04; // Clk/256
 378:	84 e0       	ldi	r24, 0x04	; 4
 37a:	85 bd       	out	0x25, r24	; 37
	led_on();
 37c:	c3 df       	rcall	.-122    	; 0x304 <led_on>
	print("!!!\n");
 37e:	8c ea       	ldi	r24, 0xAC	; 172
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	4f d3       	rcall	.+1694   	; 0xa22 <print_P>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 384:	2f ef       	ldi	r18, 0xFF	; 255
 386:	83 ef       	ldi	r24, 0xF3	; 243
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	21 50       	subi	r18, 0x01	; 1
 38c:	80 40       	sbci	r24, 0x00	; 0
 38e:	90 40       	sbci	r25, 0x00	; 0
 390:	e1 f7       	brne	.-8      	; 0x38a <bad_input+0x16>
 392:	00 c0       	rjmp	.+0      	; 0x394 <bad_input+0x20>
	_delay_ms(40);
	led_off();
 394:	00 00       	nop
 396:	b9 df       	rcall	.-142    	; 0x30a <led_off>

	// Restore the old timer
	TCCR0B = tccr0b;
 398:	c5 bd       	out	0x25, r28	; 37
}
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <main>:


int main(void)
{
 39e:	0f 92       	push	r0
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
	uint8_t b, d, mask, i, reset_idle;
	uint8_t b_prev=0xFF, d_prev=0xFF;

	// set for 16 MHz clock
	CPU_PRESCALE(0);
 3a4:	80 e8       	ldi	r24, 0x80	; 128
 3a6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 3aa:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRD |= LED_PIN;
 3ae:	56 9a       	sbi	0x0a, 6	; 10
	led_config();

	// Configure all port B and port D pins as inputs with pullup resistors.
	// See the "Using I/O Pins" page for details.
	// http://www.pjrc.com/teensy/pins.html
	DDRD = 0x00;
 3b0:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0x00;
 3b2:	14 b8       	out	0x04, r1	; 4
	PORTB = 0xFF;
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	85 b9       	out	0x05, r24	; 5
	PORTD = 0xFF;
 3b8:	8b b9       	out	0x0b, r24	; 11

	// Initialize the USB, and then wait for the host to set configuration.
	// If the Teensy is powered without a PC connected to the USB port,
	// this will wait forever.
	usb_init();
 3ba:	9c d0       	rcall	.+312    	; 0x4f4 <usb_init>
	while (!usb_configured())
 3bc:	b2 d0       	rcall	.+356    	; 0x522 <usb_configured>
 3be:	88 23       	and	r24, r24
 3c0:	e9 f3       	breq	.-6      	; 0x3bc <main+0x1e>
 3c2:	2f ef       	ldi	r18, 0xFF	; 255
 3c4:	83 ed       	ldi	r24, 0xD3	; 211
 3c6:	90 e3       	ldi	r25, 0x30	; 48
 3c8:	21 50       	subi	r18, 0x01	; 1
 3ca:	80 40       	sbci	r24, 0x00	; 0
 3cc:	90 40       	sbci	r25, 0x00	; 0
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <main+0x2a>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <main+0x34>
 3d2:	00 00       	nop
 3d4:	14 bc       	out	0x24, r1	; 36

	// 
	// 256*1024 clock cycles, or approx 61 Hz when using 16 MHz clock
	// This demonstrates how to use interrupts to implement a simple
	// inactivity timeout.
	TCCR0A = 0x00;
 3d6:	85 e0       	ldi	r24, 0x05	; 5
	TCCR0B = 0x05;
 3d8:	85 bd       	out	0x25, r24	; 37
 3da:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	//TIMSK0 = (1<<TOIE0);

	// TCNT1 runs at CLK/1024, which is 0.064 ms per tick
	// This is pretty close to 16 ticks/ms.  The output compare
	// sets OCF flag on match
	TCCR1B = 5; // clk/1024
 3de:	83 ec       	ldi	r24, 0xC3	; 195

	// TCNT0 is configured for a 500 Hz tone on OC0A
	// At CLK/64, this is turns on and off each time
	// a full counter is made, which creates a 488 Hz
	// square wave.
	TCCR0A = (1 << COM0A0) | (1 << COM0A1) | 0x03;
 3e0:	84 bd       	out	0x24, r24	; 36
 3e2:	83 e0       	ldi	r24, 0x03	; 3
	TCCR0B = 0x03; // CLK/64
 3e4:	85 bd       	out	0x25, r24	; 37
 3e6:	80 e8       	ldi	r24, 0x80	; 128
	OCR0A = 0x80; // low volume
 3e8:	87 bd       	out	0x27, r24	; 39

	// Set mode to fast, inverted PWM
	
	led_off();
 3ea:	8f df       	rcall	.-226    	; 0x30a <led_off>
 3ec:	00 e0       	ldi	r16, 0x00	; 0
		const uint8_t modbit = c & 0x80 ? KEY_SHIFT : 0;
		c &= ~0x80;
		usb_keyboard_press(c, modbit);

reset:
		bits = 0;
 3ee:	11 e0       	ldi	r17, 0x01	; 1
		value = 1;
 3f0:	83 b1       	in	r24, 0x03	; 3
		if (is_dit(PINB))
 3f2:	89 83       	std	Y+1, r24	; 0x01
 3f4:	89 81       	ldd	r24, Y+1	; 0x01
	return bit_is_clear(value, 5);
 3f6:	85 fd       	sbrc	r24, 5
		if (is_dit(PINB))
 3f8:	20 c0       	rjmp	.+64     	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
 3fa:	0f 5f       	subi	r16, 0xFF	; 255
			bits++;
 3fc:	11 0f       	add	r17, r17
			print(".");
 3fe:	87 eb       	ldi	r24, 0xB7	; 183
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	0f d3       	rcall	.+1566   	; 0xa22 <print_P>
 404:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <dah_count+0x1>
	dit_count = dah_count = 0;
 408:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <dah_count>
 40c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <dit_count+0x1>
 410:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <dit_count>
	led_on();
 414:	77 df       	rcall	.-274    	; 0x304 <led_on>
	busy_wait(on_ticks);
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	94 e0       	ldi	r25, 0x04	; 4
 41a:	7a df       	rcall	.-268    	; 0x310 <busy_wait>
	led_off();
 41c:	76 df       	rcall	.-276    	; 0x30a <led_off>
 41e:	80 e0       	ldi	r24, 0x00	; 0
	busy_wait(off_ticks);
 420:	94 e0       	ldi	r25, 0x04	; 4
 422:	76 df       	rcall	.-276    	; 0x310 <busy_wait>
 424:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dah_count>
			if (dah_count > button_threshold)
 428:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dah_count+0x1>
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	90 44       	sbci	r25, 0x40	; 64
 430:	48 f4       	brcc	.+18     	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
 432:	08 30       	cpi	r16, 0x08	; 8
		if (bits > 7)
 434:	e8 f2       	brcs	.-70     	; 0x3f0 <main+0x52>
 436:	9e df       	rcall	.-196    	; 0x374 <bad_input>
			bad_input();
 438:	d9 cf       	rjmp	.-78     	; 0x3ec <main+0x4e>
 43a:	83 b1       	in	r24, 0x03	; 3
 43c:	89 83       	std	Y+1, r24	; 0x01
		if (is_dah(PINB))
 43e:	89 81       	ldd	r24, Y+1	; 0x01
	return bit_is_clear(value, 4);
 440:	84 fd       	sbrc	r24, 4
		if (is_dah(PINB))
 442:	1f c0       	rjmp	.+62     	; 0x482 <__FUSE_REGION_LENGTH__+0x82>
 444:	0f 5f       	subi	r16, 0xFF	; 255
			bits++;
 446:	11 0f       	add	r17, r17
			value = (value << 1) | 1;
 448:	11 60       	ori	r17, 0x01	; 1
 44a:	85 eb       	ldi	r24, 0xB5	; 181
			print("-");
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	e9 d2       	rcall	.+1490   	; 0xa22 <print_P>
 450:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <dah_count+0x1>
	dit_count = dah_count = 0;
 454:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <dah_count>
 458:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <dit_count+0x1>
	led_on();
 45c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <dit_count>
	busy_wait(on_ticks);
 460:	51 df       	rcall	.-350    	; 0x304 <led_on>
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	9c e0       	ldi	r25, 0x0C	; 12
 466:	54 df       	rcall	.-344    	; 0x310 <busy_wait>
	led_off();
 468:	50 df       	rcall	.-352    	; 0x30a <led_off>
 46a:	80 e0       	ldi	r24, 0x00	; 0
	busy_wait(off_ticks);
 46c:	94 e0       	ldi	r25, 0x04	; 4
 46e:	50 df       	rcall	.-352    	; 0x310 <busy_wait>
 470:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dit_count>
			if (dit_count > button_threshold)
 474:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <dit_count+0x1>
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	90 44       	sbci	r25, 0x40	; 64
 47c:	08 f0       	brcs	.+2      	; 0x480 <__FUSE_REGION_LENGTH__+0x80>
 47e:	bd cf       	rjmp	.-134    	; 0x3fa <main+0x5c>
 480:	d8 cf       	rjmp	.-80     	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
 482:	00 23       	and	r16, r16
 484:	09 f4       	brne	.+2      	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
		if (bits == 0)
 486:	b4 cf       	rjmp	.-152    	; 0x3f0 <main+0x52>
 488:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
		OCR1A = TCNT1 + dit_time * 2;
 48c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 490:	98 5f       	subi	r25, 0xF8	; 248
 492:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 496:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		TIFR1 |= (1 << OCF1A);
 49a:	b1 9a       	sbi	0x16, 1	; 22
		while (bit_is_clear(TIFR1, OCF1A))
 49c:	b1 9b       	sbis	0x16, 1	; 22
		uint8_t c = pgm_read_byte(&morse[value]);
 49e:	10 c0       	rjmp	.+32     	; 0x4c0 <__FUSE_REGION_LENGTH__+0xc0>
 4a0:	e1 2f       	mov	r30, r17
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	eb 54       	subi	r30, 0x4B	; 75
 4a6:	ff 4f       	sbci	r31, 0xFF	; 255
		print(" = ");
 4a8:	04 91       	lpm	r16, Z
 4aa:	81 eb       	ldi	r24, 0xB1	; 177
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	b9 d2       	rcall	.+1394   	; 0xa22 <print_P>
		phex(value);
 4b0:	81 2f       	mov	r24, r17
 4b2:	d1 d2       	rcall	.+1442   	; 0xa56 <phex>
 4b4:	01 11       	cpse	r16, r1
		if (!c)
 4b6:	0d c0       	rjmp	.+26     	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
			bad_input();
 4b8:	5d df       	rcall	.-326    	; 0x374 <bad_input>
 4ba:	11 e0       	ldi	r17, 0x01	; 1
			goto reset;
 4bc:	00 e0       	ldi	r16, 0x00	; 0
 4be:	98 cf       	rjmp	.-208    	; 0x3f0 <main+0x52>
 4c0:	83 b1       	in	r24, 0x03	; 3
			const uint8_t port = PINB;
 4c2:	89 83       	std	Y+1, r24	; 0x01
			if (is_dah(port))
 4c4:	89 81       	ldd	r24, Y+1	; 0x01
 4c6:	84 ff       	sbrs	r24, 4
 4c8:	bd cf       	rjmp	.-134    	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
	return bit_is_clear(value, 5);
 4ca:	89 81       	ldd	r24, Y+1	; 0x01
			if (is_dit(port))
 4cc:	85 fd       	sbrc	r24, 5
 4ce:	e6 cf       	rjmp	.-52     	; 0x49c <__FUSE_REGION_LENGTH__+0x9c>
 4d0:	94 cf       	rjmp	.-216    	; 0x3fa <main+0x5c>
		pchar('\n');
 4d2:	8a e0       	ldi	r24, 0x0A	; 10
 4d4:	6e d0       	rcall	.+220    	; 0x5b2 <usb_debug_putchar>
 4d6:	60 2f       	mov	r22, r16
		const uint8_t modbit = c & 0x80 ? KEY_SHIFT : 0;
 4d8:	66 fb       	bst	r22, 6
 4da:	66 0f       	add	r22, r22
 4dc:	66 0b       	sbc	r22, r22
 4de:	60 f9       	bld	r22, 0
 4e0:	62 70       	andi	r22, 0x02	; 2
 4e2:	80 2f       	mov	r24, r16
		usb_keyboard_press(c, modbit);
 4e4:	8f 77       	andi	r24, 0x7F	; 127
 4e6:	58 d0       	rcall	.+176    	; 0x598 <usb_keyboard_press>
 4e8:	e8 cf       	rjmp	.-48     	; 0x4ba <__FUSE_REGION_LENGTH__+0xba>

000004ea <usb_wait_in_ready>:


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 4ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 4ee:	80 ff       	sbrs	r24, 0
 4f0:	fc cf       	rjmp	.-8      	; 0x4ea <usb_wait_in_ready>
}
 4f2:	08 95       	ret

000004f4 <usb_init>:
	HW_CONFIG();
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
	USB_FREEZE();				// enable USB
 4fa:	80 ea       	ldi	r24, 0xA0	; 160
 4fc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	PLL_CONFIG();				// config PLL
 500:	82 e1       	ldi	r24, 0x12	; 18
 502:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 504:	09 b4       	in	r0, 0x29	; 41
 506:	00 fe       	sbrs	r0, 0
 508:	fd cf       	rjmp	.-6      	; 0x504 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 50a:	80 e9       	ldi	r24, 0x90	; 144
 50c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
        UDCON = 0;				// enable attach resistor
 510:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	usb_configuration = 0;
 514:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <usb_configuration>
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 518:	8c e0       	ldi	r24, 0x0C	; 12
 51a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	sei();
 51e:	78 94       	sei
}
 520:	08 95       	ret

00000522 <usb_configured>:
	return usb_configuration;
 522:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <usb_configuration>
}
 526:	08 95       	ret

00000528 <usb_keyboard_send>:
	if (!usb_configuration) return -1;
 528:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <usb_configuration>
 52c:	81 11       	cpse	r24, r1
 52e:	02 c0       	rjmp	.+4      	; 0x534 <usb_keyboard_send+0xc>
 530:	8f ef       	ldi	r24, 0xFF	; 255
 532:	08 95       	ret
	intr_state = SREG;
 534:	8f b7       	in	r24, 0x3f	; 63
	cli();
 536:	f8 94       	cli
	UENUM = KEYBOARD_ENDPOINT;
 538:	93 e0       	ldi	r25, 0x03	; 3
 53a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	timeout = UDFNUML + 50;
 53e:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 542:	9e 5c       	subi	r25, 0xCE	; 206
		UENUM = KEYBOARD_ENDPOINT;
 544:	23 e0       	ldi	r18, 0x03	; 3
		if (UEINTX & (1<<RWAL)) break;
 546:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 54a:	35 fd       	sbrc	r19, 5
 54c:	0e c0       	rjmp	.+28     	; 0x56a <usb_keyboard_send+0x42>
		SREG = intr_state;
 54e:	8f bf       	out	0x3f, r24	; 63
		if (!usb_configuration) return -1;
 550:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <usb_configuration>
 554:	88 23       	and	r24, r24
 556:	61 f3       	breq	.-40     	; 0x530 <usb_keyboard_send+0x8>
		if (UDFNUML == timeout) return -1;
 558:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 55c:	89 17       	cp	r24, r25
 55e:	41 f3       	breq	.-48     	; 0x530 <usb_keyboard_send+0x8>
		intr_state = SREG;
 560:	8f b7       	in	r24, 0x3f	; 63
		cli();
 562:	f8 94       	cli
		UENUM = KEYBOARD_ENDPOINT;
 564:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (UEINTX & (1<<RWAL)) break;
 568:	ee cf       	rjmp	.-36     	; 0x546 <usb_keyboard_send+0x1e>
	UEDATX = keyboard_modifier_keys;
 56a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <keyboard_modifier_keys>
 56e:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	UEDATX = 0;
 572:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	for (i=0; i<6; i++) {
 576:	e9 e0       	ldi	r30, 0x09	; 9
 578:	f1 e0       	ldi	r31, 0x01	; 1
		UEDATX = keyboard_keys[i];
 57a:	91 91       	ld	r25, Z+
 57c:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	for (i=0; i<6; i++) {
 580:	91 e0       	ldi	r25, 0x01	; 1
 582:	ef 30       	cpi	r30, 0x0F	; 15
 584:	f9 07       	cpc	r31, r25
 586:	c9 f7       	brne	.-14     	; 0x57a <usb_keyboard_send+0x52>
	UEINTX = 0x3A;
 588:	9a e3       	ldi	r25, 0x3A	; 58
 58a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	keyboard_idle_count = 0;
 58e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <keyboard_idle_count>
	SREG = intr_state;
 592:	8f bf       	out	0x3f, r24	; 63
	return 0;
 594:	80 e0       	ldi	r24, 0x00	; 0
}
 596:	08 95       	ret

00000598 <usb_keyboard_press>:
	keyboard_modifier_keys = modifier;
 598:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <keyboard_modifier_keys>
	keyboard_keys[0] = key;
 59c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <keyboard_keys>
	r = usb_keyboard_send();
 5a0:	c3 df       	rcall	.-122    	; 0x528 <usb_keyboard_send>
	if (r) return r;
 5a2:	81 11       	cpse	r24, r1
 5a4:	05 c0       	rjmp	.+10     	; 0x5b0 <usb_keyboard_press+0x18>
	keyboard_modifier_keys = 0;
 5a6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <keyboard_modifier_keys>
	keyboard_keys[0] = 0;
 5aa:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <keyboard_keys>
	return usb_keyboard_send();
 5ae:	bc cf       	rjmp	.-136    	; 0x528 <usb_keyboard_send>
}
 5b0:	08 95       	ret

000005b2 <usb_debug_putchar>:
	if (!usb_configuration) return -1;
 5b2:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <usb_configuration>
 5b6:	91 11       	cpse	r25, r1
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <usb_debug_putchar+0xc>
			return -1;
 5ba:	8f ef       	ldi	r24, 0xFF	; 255
 5bc:	08 95       	ret
	intr_state = SREG;
 5be:	9f b7       	in	r25, 0x3f	; 63
	cli();
 5c0:	f8 94       	cli
	UENUM = DEBUG_TX_ENDPOINT;
 5c2:	24 e0       	ldi	r18, 0x04	; 4
 5c4:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	if (previous_timeout) {
 5c8:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <previous_timeout.1772>
 5cc:	22 23       	and	r18, r18
 5ce:	41 f0       	breq	.+16     	; 0x5e0 <usb_debug_putchar+0x2e>
		if (!(UEINTX & (1<<RWAL))) {
 5d0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5d4:	25 fd       	sbrc	r18, 5
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <usb_debug_putchar+0x2a>
			SREG = intr_state;
 5d8:	9f bf       	out	0x3f, r25	; 63
 5da:	ef cf       	rjmp	.-34     	; 0x5ba <usb_debug_putchar+0x8>
		previous_timeout = 0;
 5dc:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <previous_timeout.1772>
	timeout = UDFNUML + 4;
 5e0:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 5e4:	2c 5f       	subi	r18, 0xFC	; 252
		UENUM = DEBUG_TX_ENDPOINT;
 5e6:	34 e0       	ldi	r19, 0x04	; 4
		if (UEINTX & (1<<RWAL)) break;
 5e8:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5ec:	45 fd       	sbrc	r20, 5
 5ee:	12 c0       	rjmp	.+36     	; 0x614 <usb_debug_putchar+0x62>
		SREG = intr_state;
 5f0:	9f bf       	out	0x3f, r25	; 63
		if (UDFNUML == timeout) {
 5f2:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 5f6:	92 13       	cpse	r25, r18
 5f8:	04 c0       	rjmp	.+8      	; 0x602 <usb_debug_putchar+0x50>
			previous_timeout = 1;
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <previous_timeout.1772>
			return -1;
 600:	dc cf       	rjmp	.-72     	; 0x5ba <usb_debug_putchar+0x8>
		if (!usb_configuration) return -1;
 602:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <usb_configuration>
 606:	99 23       	and	r25, r25
 608:	c1 f2       	breq	.-80     	; 0x5ba <usb_debug_putchar+0x8>
		intr_state = SREG;
 60a:	9f b7       	in	r25, 0x3f	; 63
		cli();
 60c:	f8 94       	cli
		UENUM = DEBUG_TX_ENDPOINT;
 60e:	30 93 e9 00 	sts	0x00E9, r19	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (UEINTX & (1<<RWAL)) break;
 612:	ea cf       	rjmp	.-44     	; 0x5e8 <usb_debug_putchar+0x36>
	UEDATX = c;
 614:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	if (!(UEINTX & (1<<RWAL))) {
 618:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 61c:	85 fd       	sbrc	r24, 5
 61e:	08 c0       	rjmp	.+16     	; 0x630 <usb_debug_putchar+0x7e>
		UEINTX = 0x3A;
 620:	8a e3       	ldi	r24, 0x3A	; 58
 622:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		debug_flush_timer = 0;
 626:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <debug_flush_timer>
	SREG = intr_state;
 62a:	9f bf       	out	0x3f, r25	; 63
	return 0;
 62c:	80 e0       	ldi	r24, 0x00	; 0
}
 62e:	08 95       	ret
		debug_flush_timer = 2;
 630:	82 e0       	ldi	r24, 0x02	; 2
 632:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <debug_flush_timer>
 636:	f9 cf       	rjmp	.-14     	; 0x62a <usb_debug_putchar+0x78>

00000638 <__vector_10>:
{
 638:	1f 92       	push	r1
 63a:	1f b6       	in	r1, 0x3f	; 63
 63c:	1f 92       	push	r1
 63e:	11 24       	eor	r1, r1
 640:	8f 93       	push	r24
 642:	9f 93       	push	r25
 644:	ef 93       	push	r30
 646:	ff 93       	push	r31
        intbits = UDINT;
 648:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        UDINT = 0;
 64c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        if (intbits & (1<<EORSTI)) {
 650:	83 ff       	sbrs	r24, 3
 652:	0f c0       	rjmp	.+30     	; 0x672 <__vector_10+0x3a>
		UENUM = 0;
 654:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
 658:	91 e0       	ldi	r25, 0x01	; 1
 65a:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
 65e:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 662:	92 e2       	ldi	r25, 0x22	; 34
 664:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
 668:	98 e0       	ldi	r25, 0x08	; 8
 66a:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
 66e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <usb_configuration>
	if ((intbits & (1<<SOFI)) && usb_configuration) {
 672:	82 ff       	sbrs	r24, 2
 674:	47 c0       	rjmp	.+142    	; 0x704 <__vector_10+0xcc>
 676:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <usb_configuration>
 67a:	88 23       	and	r24, r24
 67c:	09 f4       	brne	.+2      	; 0x680 <__vector_10+0x48>
 67e:	42 c0       	rjmp	.+132    	; 0x704 <__vector_10+0xcc>
		t = debug_flush_timer;
 680:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <debug_flush_timer>
		if (t) {
 684:	88 23       	and	r24, r24
 686:	79 f0       	breq	.+30     	; 0x6a6 <__vector_10+0x6e>
			debug_flush_timer = -- t;
 688:	81 50       	subi	r24, 0x01	; 1
 68a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <debug_flush_timer>
			if (!t) {
 68e:	81 11       	cpse	r24, r1
 690:	0a c0       	rjmp	.+20     	; 0x6a6 <__vector_10+0x6e>
				UENUM = DEBUG_TX_ENDPOINT;
 692:	84 e0       	ldi	r24, 0x04	; 4
 694:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				while ((UEINTX & (1<<RWAL))) {
 698:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 69c:	85 fd       	sbrc	r24, 5
 69e:	3a c0       	rjmp	.+116    	; 0x714 <__vector_10+0xdc>
				UEINTX = 0x3A;
 6a0:	8a e3       	ldi	r24, 0x3A	; 58
 6a2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (keyboard_idle_config && (++div4 & 3) == 0) {
 6a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 6aa:	88 23       	and	r24, r24
 6ac:	59 f1       	breq	.+86     	; 0x704 <__vector_10+0xcc>
 6ae:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <div4.1792>
 6b2:	8f 5f       	subi	r24, 0xFF	; 255
 6b4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <div4.1792>
 6b8:	83 70       	andi	r24, 0x03	; 3
 6ba:	21 f5       	brne	.+72     	; 0x704 <__vector_10+0xcc>
			UENUM = KEYBOARD_ENDPOINT;
 6bc:	83 e0       	ldi	r24, 0x03	; 3
 6be:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			if (UEINTX & (1<<RWAL)) {
 6c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6c6:	85 ff       	sbrs	r24, 5
 6c8:	1d c0       	rjmp	.+58     	; 0x704 <__vector_10+0xcc>
				keyboard_idle_count++;
 6ca:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <keyboard_idle_count>
 6ce:	8f 5f       	subi	r24, 0xFF	; 255
 6d0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <keyboard_idle_count>
				if (keyboard_idle_count == keyboard_idle_config) {
 6d4:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 6d8:	89 13       	cpse	r24, r25
 6da:	14 c0       	rjmp	.+40     	; 0x704 <__vector_10+0xcc>
					keyboard_idle_count = 0;
 6dc:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <keyboard_idle_count>
					UEDATX = keyboard_modifier_keys;
 6e0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <keyboard_modifier_keys>
 6e4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEDATX = 0;
 6e8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					for (i=0; i<6; i++) {
 6ec:	e9 e0       	ldi	r30, 0x09	; 9
 6ee:	f1 e0       	ldi	r31, 0x01	; 1
						UEDATX = keyboard_keys[i];
 6f0:	81 91       	ld	r24, Z+
 6f2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					for (i=0; i<6; i++) {
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	ef 30       	cpi	r30, 0x0F	; 15
 6fa:	f8 07       	cpc	r31, r24
 6fc:	c9 f7       	brne	.-14     	; 0x6f0 <__vector_10+0xb8>
					UEINTX = 0x3A;
 6fe:	8a e3       	ldi	r24, 0x3A	; 58
 700:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
 704:	ff 91       	pop	r31
 706:	ef 91       	pop	r30
 708:	9f 91       	pop	r25
 70a:	8f 91       	pop	r24
 70c:	1f 90       	pop	r1
 70e:	1f be       	out	0x3f, r1	; 63
 710:	1f 90       	pop	r1
 712:	18 95       	reti
					UEDATX = 0;
 714:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 718:	bf cf       	rjmp	.-130    	; 0x698 <__vector_10+0x60>

0000071a <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 71a:	1f 92       	push	r1
 71c:	0f 92       	push	r0
 71e:	0f b6       	in	r0, 0x3f	; 63
 720:	0f 92       	push	r0
 722:	11 24       	eor	r1, r1
 724:	ef 92       	push	r14
 726:	ff 92       	push	r15
 728:	0f 93       	push	r16
 72a:	1f 93       	push	r17
 72c:	2f 93       	push	r18
 72e:	3f 93       	push	r19
 730:	4f 93       	push	r20
 732:	5f 93       	push	r21
 734:	6f 93       	push	r22
 736:	7f 93       	push	r23
 738:	8f 93       	push	r24
 73a:	9f 93       	push	r25
 73c:	af 93       	push	r26
 73e:	bf 93       	push	r27
 740:	cf 93       	push	r28
 742:	df 93       	push	r29
 744:	ef 93       	push	r30
 746:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 748:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	intbits = UEINTX;
 74c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (intbits & (1<<RXSTPI)) {
 750:	83 ff       	sbrs	r24, 3
 752:	72 c0       	rjmp	.+228    	; 0x838 <__vector_11+0x11e>
                bmRequestType = UEDATX;
 754:	d0 91 f1 00 	lds	r29, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                bRequest = UEDATX;
 758:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wValue = UEDATX;
 75c:	00 91 f1 00 	lds	r16, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wValue |= (UEDATX << 8);
 760:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 764:	18 2f       	mov	r17, r24
                wIndex = UEDATX;
 766:	e0 90 f1 00 	lds	r14, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wIndex |= (UEDATX << 8);
 76a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 76e:	f8 2e       	mov	r15, r24
                wLength = UEDATX;
 770:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wLength |= (UEDATX << 8);
 774:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 778:	38 2f       	mov	r19, r24
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 77a:	82 ef       	ldi	r24, 0xF2	; 242
 77c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
 780:	c6 30       	cpi	r28, 0x06	; 6
 782:	09 f0       	breq	.+2      	; 0x786 <__vector_11+0x6c>
 784:	65 c0       	rjmp	.+202    	; 0x850 <__vector_11+0x136>
 786:	89 eb       	ldi	r24, 0xB9	; 185
 788:	91 e0       	ldi	r25, 0x01	; 1
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
 78a:	fc 01       	movw	r30, r24
 78c:	45 91       	lpm	r20, Z+
 78e:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
 790:	04 17       	cp	r16, r20
 792:	15 07       	cpc	r17, r21
 794:	09 f0       	breq	.+2      	; 0x798 <__vector_11+0x7e>
 796:	4a c0       	rjmp	.+148    	; 0x82c <__vector_11+0x112>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 798:	fc 01       	movw	r30, r24
 79a:	32 96       	adiw	r30, 0x02	; 2
 79c:	45 91       	lpm	r20, Z+
 79e:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
 7a0:	e4 16       	cp	r14, r20
 7a2:	f5 06       	cpc	r15, r21
 7a4:	09 f0       	breq	.+2      	; 0x7a8 <__vector_11+0x8e>
 7a6:	42 c0       	rjmp	.+132    	; 0x82c <__vector_11+0x112>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 7a8:	fc 01       	movw	r30, r24
 7aa:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 7ac:	45 91       	lpm	r20, Z+
 7ae:	54 91       	lpm	r21, Z
				list += 2;
 7b0:	fc 01       	movw	r30, r24
 7b2:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 7b4:	e4 91       	lpm	r30, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 7b6:	2f 3f       	cpi	r18, 0xFF	; 255
 7b8:	31 05       	cpc	r19, r1
 7ba:	19 f0       	breq	.+6      	; 0x7c2 <__vector_11+0xa8>
 7bc:	10 f0       	brcs	.+4      	; 0x7c2 <__vector_11+0xa8>
 7be:	2f ef       	ldi	r18, 0xFF	; 255
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	e2 17       	cp	r30, r18
 7c4:	08 f4       	brcc	.+2      	; 0x7c8 <__vector_11+0xae>
 7c6:	2e 2f       	mov	r18, r30
	UEINTX = ~(1<<TXINI);
 7c8:	3e ef       	ldi	r19, 0xFE	; 254
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 7ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 7ce:	98 2f       	mov	r25, r24
 7d0:	95 70       	andi	r25, 0x05	; 5
 7d2:	d9 f3       	breq	.-10     	; 0x7ca <__vector_11+0xb0>
				if (i & (1<<RXOUTI)) return;	// abort
 7d4:	82 fd       	sbrc	r24, 2
 7d6:	13 c0       	rjmp	.+38     	; 0x7fe <__vector_11+0xe4>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 7d8:	82 2f       	mov	r24, r18
 7da:	21 32       	cpi	r18, 0x21	; 33
 7dc:	08 f0       	brcs	.+2      	; 0x7e0 <__vector_11+0xc6>
 7de:	80 e2       	ldi	r24, 0x20	; 32
				for (i = n; i; i--) {
 7e0:	fa 01       	movw	r30, r20
 7e2:	98 2f       	mov	r25, r24
 7e4:	91 11       	cpse	r25, r1
 7e6:	2e c0       	rjmp	.+92     	; 0x844 <__vector_11+0x12a>
 7e8:	48 0f       	add	r20, r24
 7ea:	51 1d       	adc	r21, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 7ec:	92 2f       	mov	r25, r18
 7ee:	98 1b       	sub	r25, r24
 7f0:	89 2f       	mov	r24, r25
	UEINTX = ~(1<<TXINI);
 7f2:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 7f6:	91 11       	cpse	r25, r1
 7f8:	23 c0       	rjmp	.+70     	; 0x840 <__vector_11+0x126>
 7fa:	20 32       	cpi	r18, 0x20	; 32
 7fc:	08 f5       	brcc	.+66     	; 0x840 <__vector_11+0x126>
				return;
			}
		}
	}
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 7fe:	ff 91       	pop	r31
 800:	ef 91       	pop	r30
 802:	df 91       	pop	r29
 804:	cf 91       	pop	r28
 806:	bf 91       	pop	r27
 808:	af 91       	pop	r26
 80a:	9f 91       	pop	r25
 80c:	8f 91       	pop	r24
 80e:	7f 91       	pop	r23
 810:	6f 91       	pop	r22
 812:	5f 91       	pop	r21
 814:	4f 91       	pop	r20
 816:	3f 91       	pop	r19
 818:	2f 91       	pop	r18
 81a:	1f 91       	pop	r17
 81c:	0f 91       	pop	r16
 81e:	ff 90       	pop	r15
 820:	ef 90       	pop	r14
 822:	0f 90       	pop	r0
 824:	0f be       	out	0x3f, r0	; 63
 826:	0f 90       	pop	r0
 828:	1f 90       	pop	r1
 82a:	18 95       	reti
				if (i >= NUM_DESC_LIST) {
 82c:	07 96       	adiw	r24, 0x07	; 7
 82e:	41 e0       	ldi	r20, 0x01	; 1
 830:	88 3f       	cpi	r24, 0xF8	; 248
 832:	94 07       	cpc	r25, r20
 834:	09 f0       	breq	.+2      	; 0x838 <__vector_11+0x11e>
 836:	a9 cf       	rjmp	.-174    	; 0x78a <__vector_11+0x70>
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 838:	81 e2       	ldi	r24, 0x21	; 33
 83a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 83e:	df cf       	rjmp	.-66     	; 0x7fe <__vector_11+0xe4>
{
 840:	28 2f       	mov	r18, r24
 842:	c3 cf       	rjmp	.-122    	; 0x7ca <__vector_11+0xb0>
					UEDATX = pgm_read_byte(desc_addr++);
 844:	64 91       	lpm	r22, Z
 846:	60 93 f1 00 	sts	0x00F1, r22	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				for (i = n; i; i--) {
 84a:	91 50       	subi	r25, 0x01	; 1
 84c:	31 96       	adiw	r30, 0x01	; 1
 84e:	ca cf       	rjmp	.-108    	; 0x7e4 <__vector_11+0xca>
		if (bRequest == SET_ADDRESS) {
 850:	c5 30       	cpi	r28, 0x05	; 5
 852:	41 f4       	brne	.+16     	; 0x864 <__vector_11+0x14a>
	UEINTX = ~(1<<TXINI);
 854:	8e ef       	ldi	r24, 0xFE	; 254
 856:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			usb_wait_in_ready();
 85a:	47 de       	rcall	.-882    	; 0x4ea <usb_wait_in_ready>
			UDADDR = wValue | (1<<ADDEN);
 85c:	00 68       	ori	r16, 0x80	; 128
 85e:	00 93 e3 00 	sts	0x00E3, r16	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			return;
 862:	cd cf       	rjmp	.-102    	; 0x7fe <__vector_11+0xe4>
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 864:	c9 30       	cpi	r28, 0x09	; 9
 866:	49 f5       	brne	.+82     	; 0x8ba <__vector_11+0x1a0>
 868:	d1 11       	cpse	r29, r1
 86a:	6a c0       	rjmp	.+212    	; 0x940 <__vector_11+0x226>
			usb_configuration = wValue;
 86c:	00 93 14 01 	sts	0x0114, r16	; 0x800114 <usb_configuration>
	UEINTX = ~(1<<TXINI);
 870:	8e ef       	ldi	r24, 0xFE	; 254
 872:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			for (i=1; i<5; i++) {
 876:	21 e0       	ldi	r18, 0x01	; 1
			cfg = endpoint_config_table;
 878:	83 ec       	ldi	r24, 0xC3	; 195
 87a:	92 e0       	ldi	r25, 0x02	; 2
				UENUM = i;
 87c:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				en = pgm_read_byte(cfg++);
 880:	ac 01       	movw	r20, r24
 882:	4f 5f       	subi	r20, 0xFF	; 255
 884:	5f 4f       	sbci	r21, 0xFF	; 255
 886:	fc 01       	movw	r30, r24
 888:	34 91       	lpm	r19, Z
				UECONX = en;
 88a:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				if (en) {
 88e:	33 23       	and	r19, r19
 890:	91 f0       	breq	.+36     	; 0x8b6 <__vector_11+0x19c>
					UECFG0X = pgm_read_byte(cfg++);
 892:	fa 01       	movw	r30, r20
 894:	44 91       	lpm	r20, Z
 896:	40 93 ec 00 	sts	0x00EC, r20	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
					UECFG1X = pgm_read_byte(cfg++);
 89a:	31 96       	adiw	r30, 0x01	; 1
 89c:	e4 91       	lpm	r30, Z
 89e:	03 96       	adiw	r24, 0x03	; 3
 8a0:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			for (i=1; i<5; i++) {
 8a4:	2f 5f       	subi	r18, 0xFF	; 255
 8a6:	25 30       	cpi	r18, 0x05	; 5
 8a8:	49 f7       	brne	.-46     	; 0x87c <__vector_11+0x162>
        		UERST = 0x1E;
 8aa:	8e e1       	ldi	r24, 0x1E	; 30
					UERST = (1 << i);
 8ac:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UERST = 0;
 8b0:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
 8b4:	a4 cf       	rjmp	.-184    	; 0x7fe <__vector_11+0xe4>
				en = pgm_read_byte(cfg++);
 8b6:	ca 01       	movw	r24, r20
 8b8:	f5 cf       	rjmp	.-22     	; 0x8a4 <__vector_11+0x18a>
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 8ba:	c8 30       	cpi	r28, 0x08	; 8
 8bc:	49 f4       	brne	.+18     	; 0x8d0 <__vector_11+0x1b6>
 8be:	d0 38       	cpi	r29, 0x80	; 128
 8c0:	09 f0       	breq	.+2      	; 0x8c4 <__vector_11+0x1aa>
			usb_wait_in_ready();
 8c2:	3e c0       	rjmp	.+124    	; 0x940 <__vector_11+0x226>
 8c4:	12 de       	rcall	.-988    	; 0x4ea <usb_wait_in_ready>
			UEDATX = usb_configuration;
 8c6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <usb_configuration>
					UEDATX = keyboard_protocol;
 8ca:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	UEINTX = ~(1<<TXINI);
 8ce:	12 c0       	rjmp	.+36     	; 0x8f4 <__vector_11+0x1da>
		if (bRequest == GET_STATUS) {
 8d0:	c1 11       	cpse	r28, r1
			usb_wait_in_ready();
 8d2:	14 c0       	rjmp	.+40     	; 0x8fc <__vector_11+0x1e2>
 8d4:	0a de       	rcall	.-1004   	; 0x4ea <usb_wait_in_ready>
			if (bmRequestType == 0x82) {
 8d6:	d2 38       	cpi	r29, 0x82	; 130
 8d8:	49 f4       	brne	.+18     	; 0x8ec <__vector_11+0x1d2>
				UENUM = wIndex;
 8da:	e0 92 e9 00 	sts	0x00E9, r14	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (UECONX & (1<<STALLRQ)) i = 1;
 8de:	c0 91 eb 00 	lds	r28, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 8e2:	c5 fb       	bst	r28, 5
 8e4:	cc 27       	eor	r28, r28
 8e6:	c0 f9       	bld	r28, 0
				UENUM = 0;
 8e8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			UEDATX = i;
 8ec:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			UEDATX = 0;
 8f0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	UEINTX = ~(1<<TXINI);
 8f4:	8e ef       	ldi	r24, 0xFE	; 254
 8f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					return;
 8fa:	81 cf       	rjmp	.-254    	; 0x7fe <__vector_11+0xe4>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 8fc:	8c 2f       	mov	r24, r28
 8fe:	8d 7f       	andi	r24, 0xFD	; 253
 900:	81 30       	cpi	r24, 0x01	; 1
 902:	f1 f4       	brne	.+60     	; 0x940 <__vector_11+0x226>
		  && bmRequestType == 0x02 && wValue == 0) {
 904:	d2 30       	cpi	r29, 0x02	; 2
 906:	e1 f4       	brne	.+56     	; 0x940 <__vector_11+0x226>
 908:	01 2b       	or	r16, r17
 90a:	09 f0       	breq	.+2      	; 0x90e <__vector_11+0x1f4>
 90c:	61 c0       	rjmp	.+194    	; 0x9d0 <__vector_11+0x2b6>
			i = wIndex & 0x7F;
 90e:	4e 2d       	mov	r20, r14
 910:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 912:	8f ef       	ldi	r24, 0xFF	; 255
 914:	84 0f       	add	r24, r20
 916:	84 30       	cpi	r24, 0x04	; 4
 918:	08 f0       	brcs	.+2      	; 0x91c <__vector_11+0x202>
 91a:	5a c0       	rjmp	.+180    	; 0x9d0 <__vector_11+0x2b6>
	UEINTX = ~(1<<TXINI);
 91c:	8e ef       	ldi	r24, 0xFE	; 254
 91e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UENUM = i;
 922:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
 926:	c3 30       	cpi	r28, 0x03	; 3
 928:	09 f4       	brne	.+2      	; 0x92c <__vector_11+0x212>
 92a:	86 cf       	rjmp	.-244    	; 0x838 <__vector_11+0x11e>
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 92c:	89 e1       	ldi	r24, 0x19	; 25
 92e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	01 c0       	rjmp	.+2      	; 0x93a <__vector_11+0x220>
 938:	88 0f       	add	r24, r24
 93a:	4a 95       	dec	r20
 93c:	ea f7       	brpl	.-6      	; 0x938 <__vector_11+0x21e>
 93e:	b6 cf       	rjmp	.-148    	; 0x8ac <__vector_11+0x192>
		if (wIndex == KEYBOARD_INTERFACE) {
 940:	e1 14       	cp	r14, r1
 942:	f1 04       	cpc	r15, r1
 944:	09 f0       	breq	.+2      	; 0x948 <__vector_11+0x22e>
 946:	48 c0       	rjmp	.+144    	; 0x9d8 <__vector_11+0x2be>
			if (bmRequestType == 0xA1) {
 948:	d1 3a       	cpi	r29, 0xA1	; 161
				if (bRequest == HID_GET_REPORT) {
 94a:	01 f5       	brne	.+64     	; 0x98c <__vector_11+0x272>
 94c:	c1 30       	cpi	r28, 0x01	; 1
					usb_wait_in_ready();
 94e:	89 f4       	brne	.+34     	; 0x972 <__vector_11+0x258>
 950:	cc dd       	rcall	.-1128   	; 0x4ea <usb_wait_in_ready>
					UEDATX = keyboard_modifier_keys;
 952:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <keyboard_modifier_keys>
 956:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEDATX = 0;
 95a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					for (i=0; i<6; i++) {
 95e:	e9 e0       	ldi	r30, 0x09	; 9
 960:	f1 e0       	ldi	r31, 0x01	; 1
						UEDATX = keyboard_keys[i];
 962:	81 91       	ld	r24, Z+
 964:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					for (i=0; i<6; i++) {
 968:	41 e0       	ldi	r20, 0x01	; 1
 96a:	ef 30       	cpi	r30, 0x0F	; 15
 96c:	f4 07       	cpc	r31, r20
 96e:	c9 f7       	brne	.-14     	; 0x962 <__vector_11+0x248>
				if (bRequest == HID_GET_IDLE) {
 970:	c1 cf       	rjmp	.-126    	; 0x8f4 <__vector_11+0x1da>
 972:	c2 30       	cpi	r28, 0x02	; 2
					usb_wait_in_ready();
 974:	21 f4       	brne	.+8      	; 0x97e <__vector_11+0x264>
 976:	b9 dd       	rcall	.-1166   	; 0x4ea <usb_wait_in_ready>
					UEDATX = keyboard_idle_config;
 978:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
				if (bRequest == HID_GET_PROTOCOL) {
 97c:	a6 cf       	rjmp	.-180    	; 0x8ca <__vector_11+0x1b0>
 97e:	c3 30       	cpi	r28, 0x03	; 3
 980:	09 f0       	breq	.+2      	; 0x984 <__vector_11+0x26a>
					usb_wait_in_ready();
 982:	5a cf       	rjmp	.-332    	; 0x838 <__vector_11+0x11e>
 984:	b2 dd       	rcall	.-1180   	; 0x4ea <usb_wait_in_ready>
					UEDATX = keyboard_protocol;
 986:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <keyboard_protocol>
 98a:	9f cf       	rjmp	.-194    	; 0x8ca <__vector_11+0x1b0>
			if (bmRequestType == 0x21) {
 98c:	d1 32       	cpi	r29, 0x21	; 33
 98e:	09 f0       	breq	.+2      	; 0x992 <__vector_11+0x278>
 990:	53 cf       	rjmp	.-346    	; 0x838 <__vector_11+0x11e>
				if (bRequest == HID_SET_REPORT) {
 992:	c9 30       	cpi	r28, 0x09	; 9
 994:	61 f4       	brne	.+24     	; 0x9ae <__vector_11+0x294>
	while (!(UEINTX & (1<<RXOUTI))) ;
 996:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 99a:	82 ff       	sbrs	r24, 2
 99c:	fc cf       	rjmp	.-8      	; 0x996 <__vector_11+0x27c>
					keyboard_leds = UEDATX;
 99e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 9a2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <keyboard_leds>
	UEINTX = ~(1<<RXOUTI);
 9a6:	8b ef       	ldi	r24, 0xFB	; 251
 9a8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	UEINTX = ~(1<<TXINI);
 9ac:	a3 cf       	rjmp	.-186    	; 0x8f4 <__vector_11+0x1da>
				if (bRequest == HID_SET_IDLE) {
 9ae:	ca 30       	cpi	r28, 0x0A	; 10
 9b0:	29 f4       	brne	.+10     	; 0x9bc <__vector_11+0x2a2>
					keyboard_idle_config = (wValue >> 8);
 9b2:	10 93 00 01 	sts	0x0100, r17	; 0x800100 <__data_start>
					keyboard_idle_count = 0;
 9b6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <keyboard_idle_count>
	UEINTX = ~(1<<TXINI);
 9ba:	9c cf       	rjmp	.-200    	; 0x8f4 <__vector_11+0x1da>
				if (bRequest == HID_SET_PROTOCOL) {
 9bc:	cb 30       	cpi	r28, 0x0B	; 11
 9be:	09 f0       	breq	.+2      	; 0x9c2 <__vector_11+0x2a8>
 9c0:	3b cf       	rjmp	.-394    	; 0x838 <__vector_11+0x11e>
					keyboard_protocol = wValue;
 9c2:	00 93 01 01 	sts	0x0101, r16	; 0x800101 <keyboard_protocol>
 9c6:	96 cf       	rjmp	.-212    	; 0x8f4 <__vector_11+0x1da>
						UEDATX = 0;
 9c8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					for (i = n; i; i--) {
 9cc:	91 50       	subi	r25, 0x01	; 1
 9ce:	1b c0       	rjmp	.+54     	; 0xa06 <__vector_11+0x2ec>
		if (wIndex == KEYBOARD_INTERFACE) {
 9d0:	e1 14       	cp	r14, r1
 9d2:	f1 04       	cpc	r15, r1
 9d4:	09 f4       	brne	.+2      	; 0x9d8 <__vector_11+0x2be>
 9d6:	30 cf       	rjmp	.-416    	; 0x838 <__vector_11+0x11e>
		if (wIndex == DEBUG_INTERFACE) {
 9d8:	ea 94       	dec	r14
 9da:	ef 28       	or	r14, r15
 9dc:	09 f0       	breq	.+2      	; 0x9e0 <__vector_11+0x2c6>
 9de:	2c cf       	rjmp	.-424    	; 0x838 <__vector_11+0x11e>
			if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 9e0:	c1 30       	cpi	r28, 0x01	; 1
 9e2:	09 f0       	breq	.+2      	; 0x9e6 <__vector_11+0x2cc>
 9e4:	29 cf       	rjmp	.-430    	; 0x838 <__vector_11+0x11e>
	UEINTX = ~(1<<TXINI);
 9e6:	3e ef       	ldi	r19, 0xFE	; 254
			if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 9e8:	d1 3a       	cpi	r29, 0xA1	; 161
 9ea:	09 f0       	breq	.+2      	; 0x9ee <__vector_11+0x2d4>
 9ec:	25 cf       	rjmp	.-438    	; 0x838 <__vector_11+0x11e>
						i = UEINTX;
 9ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 9f2:	98 2f       	mov	r25, r24
 9f4:	95 70       	andi	r25, 0x05	; 5
 9f6:	d9 f3       	breq	.-10     	; 0x9ee <__vector_11+0x2d4>
					if (i & (1<<RXOUTI)) return;	// abort
 9f8:	82 fd       	sbrc	r24, 2
 9fa:	01 cf       	rjmp	.-510    	; 0x7fe <__vector_11+0xe4>
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 9fc:	82 2f       	mov	r24, r18
 9fe:	21 32       	cpi	r18, 0x21	; 33
 a00:	08 f0       	brcs	.+2      	; 0xa04 <__vector_11+0x2ea>
 a02:	80 e2       	ldi	r24, 0x20	; 32
					for (i = n; i; i--) {
 a04:	98 2f       	mov	r25, r24
 a06:	91 11       	cpse	r25, r1
 a08:	df cf       	rjmp	.-66     	; 0x9c8 <__vector_11+0x2ae>
					len -= n;
 a0a:	92 2f       	mov	r25, r18
 a0c:	98 1b       	sub	r25, r24
 a0e:	89 2f       	mov	r24, r25
	UEINTX = ~(1<<TXINI);
 a10:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				} while (len || n == ENDPOINT0_SIZE);
 a14:	91 11       	cpse	r25, r1
 a16:	03 c0       	rjmp	.+6      	; 0xa1e <__vector_11+0x304>
 a18:	20 32       	cpi	r18, 0x20	; 32
 a1a:	08 f4       	brcc	.+2      	; 0xa1e <__vector_11+0x304>
 a1c:	f0 ce       	rjmp	.-544    	; 0x7fe <__vector_11+0xe4>
				en = pgm_read_byte(cfg++);
 a1e:	28 2f       	mov	r18, r24
 a20:	e6 cf       	rjmp	.-52     	; 0x9ee <__vector_11+0x2d4>

00000a22 <print_P>:
#include <avr/pgmspace.h>

#include "print.h"

void print_P(const char *s)
{
 a22:	1f 93       	push	r17
 a24:	cf 93       	push	r28
 a26:	df 93       	push	r29
 a28:	ec 01       	movw	r28, r24
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 a2a:	fe 01       	movw	r30, r28
 a2c:	14 91       	lpm	r17, Z
		if (!c) break;
 a2e:	11 23       	and	r17, r17
 a30:	41 f0       	breq	.+16     	; 0xa42 <print_P+0x20>
		if (c == '\n') usb_debug_putchar('\r');
 a32:	1a 30       	cpi	r17, 0x0A	; 10
 a34:	11 f4       	brne	.+4      	; 0xa3a <print_P+0x18>
 a36:	8d e0       	ldi	r24, 0x0D	; 13
 a38:	bc dd       	rcall	.-1160   	; 0x5b2 <usb_debug_putchar>
		usb_debug_putchar(c);
 a3a:	81 2f       	mov	r24, r17
 a3c:	ba dd       	rcall	.-1164   	; 0x5b2 <usb_debug_putchar>
 a3e:	21 96       	adiw	r28, 0x01	; 1
		c = pgm_read_byte(s++);
 a40:	f4 cf       	rjmp	.-24     	; 0xa2a <print_P+0x8>
	}
}
 a42:	df 91       	pop	r29
 a44:	cf 91       	pop	r28
 a46:	1f 91       	pop	r17
 a48:	08 95       	ret

00000a4a <phex1>:

void phex1(unsigned char c)
{
	usb_debug_putchar(c + ((c < 10) ? '0' : 'A' - 10));
 a4a:	97 e3       	ldi	r25, 0x37	; 55
 a4c:	8a 30       	cpi	r24, 0x0A	; 10
 a4e:	08 f4       	brcc	.+2      	; 0xa52 <phex1+0x8>
 a50:	90 e3       	ldi	r25, 0x30	; 48
 a52:	89 0f       	add	r24, r25
 a54:	ae cd       	rjmp	.-1188   	; 0x5b2 <usb_debug_putchar>

00000a56 <phex>:
}

void phex(unsigned char c)
{
 a56:	cf 93       	push	r28
 a58:	c8 2f       	mov	r28, r24
	phex1(c >> 4);
 a5a:	82 95       	swap	r24
 a5c:	8f 70       	andi	r24, 0x0F	; 15
 a5e:	f5 df       	rcall	.-22     	; 0xa4a <phex1>
	phex1(c & 15);
 a60:	8c 2f       	mov	r24, r28
 a62:	8f 70       	andi	r24, 0x0F	; 15
 a64:	cf 91       	pop	r28
 a66:	f1 cf       	rjmp	.-30     	; 0xa4a <phex1>

00000a68 <_exit>:
 a68:	f8 94       	cli

00000a6a <__stop_program>:
 a6a:	ff cf       	rjmp	.-2      	; 0xa6a <__stop_program>
