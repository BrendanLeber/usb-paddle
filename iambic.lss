
iambic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000a62  00000af6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800102  00800102  00000af8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b0c  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000138  00000000  00000000  00000b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00001f0d  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00001097  00000000  00000000  00002b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   000021a5  00000000  00000000  00003c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00000210  00000000  00000000  00005dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00000959  00000000  00000000  00005fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000011d1  00000000  00000000  0000693d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000148  00000000  00000000  00007b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c1       	rjmp	.+714    	; 0x2cc <__ctors_end>
   2:	00 00       	nop
   4:	7e c1       	rjmp	.+764    	; 0x302 <__bad_interrupt>
   6:	00 00       	nop
   8:	7c c1       	rjmp	.+760    	; 0x302 <__bad_interrupt>
   a:	00 00       	nop
   c:	7a c1       	rjmp	.+756    	; 0x302 <__bad_interrupt>
   e:	00 00       	nop
  10:	78 c1       	rjmp	.+752    	; 0x302 <__bad_interrupt>
  12:	00 00       	nop
  14:	76 c1       	rjmp	.+748    	; 0x302 <__bad_interrupt>
  16:	00 00       	nop
  18:	74 c1       	rjmp	.+744    	; 0x302 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	72 c1       	rjmp	.+740    	; 0x302 <__bad_interrupt>
  1e:	00 00       	nop
  20:	70 c1       	rjmp	.+736    	; 0x302 <__bad_interrupt>
  22:	00 00       	nop
  24:	6e c1       	rjmp	.+732    	; 0x302 <__bad_interrupt>
  26:	00 00       	nop
  28:	04 c3       	rjmp	.+1544   	; 0x632 <__vector_10>
  2a:	00 00       	nop
  2c:	73 c3       	rjmp	.+1766   	; 0x714 <__vector_11>
  2e:	00 00       	nop
  30:	68 c1       	rjmp	.+720    	; 0x302 <__bad_interrupt>
  32:	00 00       	nop
  34:	66 c1       	rjmp	.+716    	; 0x302 <__bad_interrupt>
  36:	00 00       	nop
  38:	64 c1       	rjmp	.+712    	; 0x302 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	62 c1       	rjmp	.+708    	; 0x302 <__bad_interrupt>
  3e:	00 00       	nop
  40:	60 c1       	rjmp	.+704    	; 0x302 <__bad_interrupt>
  42:	00 00       	nop
  44:	5e c1       	rjmp	.+700    	; 0x302 <__bad_interrupt>
  46:	00 00       	nop
  48:	5c c1       	rjmp	.+696    	; 0x302 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5a c1       	rjmp	.+692    	; 0x302 <__bad_interrupt>
  4e:	00 00       	nop
  50:	58 c1       	rjmp	.+688    	; 0x302 <__bad_interrupt>
  52:	00 00       	nop
  54:	56 c1       	rjmp	.+684    	; 0x302 <__bad_interrupt>
  56:	00 00       	nop
  58:	54 c1       	rjmp	.+680    	; 0x302 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	52 c1       	rjmp	.+676    	; 0x302 <__bad_interrupt>
  5e:	00 00       	nop
  60:	50 c1       	rjmp	.+672    	; 0x302 <__bad_interrupt>
  62:	00 00       	nop
  64:	4e c1       	rjmp	.+668    	; 0x302 <__bad_interrupt>
  66:	00 00       	nop
  68:	4c c1       	rjmp	.+664    	; 0x302 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4a c1       	rjmp	.+660    	; 0x302 <__bad_interrupt>
  6e:	00 00       	nop
  70:	48 c1       	rjmp	.+656    	; 0x302 <__bad_interrupt>
  72:	00 00       	nop
  74:	46 c1       	rjmp	.+652    	; 0x302 <__bad_interrupt>
  76:	00 00       	nop
  78:	44 c1       	rjmp	.+648    	; 0x302 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	42 c1       	rjmp	.+644    	; 0x302 <__bad_interrupt>
  7e:	00 00       	nop
  80:	40 c1       	rjmp	.+640    	; 0x302 <__bad_interrupt>
  82:	00 00       	nop
  84:	3e c1       	rjmp	.+636    	; 0x302 <__bad_interrupt>
  86:	00 00       	nop
  88:	3c c1       	rjmp	.+632    	; 0x302 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3a c1       	rjmp	.+628    	; 0x302 <__bad_interrupt>
  8e:	00 00       	nop
  90:	38 c1       	rjmp	.+624    	; 0x302 <__bad_interrupt>
  92:	00 00       	nop
  94:	36 c1       	rjmp	.+620    	; 0x302 <__bad_interrupt>
  96:	00 00       	nop
  98:	34 c1       	rjmp	.+616    	; 0x302 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	32 c1       	rjmp	.+612    	; 0x302 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	30 c1       	rjmp	.+608    	; 0x302 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	2e c1       	rjmp	.+604    	; 0x302 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2c c1       	rjmp	.+600    	; 0x302 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__c.1835>:
  ac:	21 21 21 0a 00                                      !!!..

000000b1 <__c.1873>:
  b1:	20 3d 20 00                                          = .

000000b5 <morse.1850>:
  b5:	00 00 08 17 0c 04 11 10 16 18 15 1a 07 0e 0a 12     ................
  c5:	0b 19 09 2c 0f 00 13 0d 05 2e 06 1c 1d 14 00 00     ...,............
  d5:	22 21 00 20 00 00 00 1f a4 00 ae 00 00 00 00 1e     "!. ............
  e5:	23 00 38 00 00 00 a6 00 24 00 00 00 25 00 26 27     #.8.....$...%.&'
  f5:	00 00 00 00 00 00 00 00 00 00 00 00 b8 ad 00 00     ................
 105:	00 00 b4 00 00 37 00 00 00 00 9f 00 00 00 34 00     .....7........4.
 115:	00 2d 00 00 00 00 00 00 00 00 33 9e 00 a7 00 00     .-........3.....
 125:	00 00 00 36 00 00 00 00 b3 00 00 00 00 00 00 00     ...6............
 135:	00 00 00 00 00 00 00 00 00 a1 00 00 00 00 00 00     ................
 145:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 155:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 165:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 175:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 185:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 195:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 1a5:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

000001b5 <__c.1863>:
 1b5:	2d 00                                               -.

000001b7 <__c.1859>:
 1b7:	2e 00                                               ..

000001b9 <descriptor_list>:
 1b9:	00 01 00 00 b1 02 12 00 02 00 00 22 02 3b 00 22     ...........".;."
 1c9:	00 00 72 02 3f 00 21 00 00 34 02 09 00 22 01 00     ..r.?.!..4..."..
 1d9:	5d 02 15 00 21 01 00 4d 02 09 00 03 00 00 1e 02     ]...!..M........
 1e9:	04 01 03 09 04 0c 02 10 02 03 09 04 f8 01 12        ...............

000001f8 <string2>:
 1f8:	12 03 4b 00 65 00 79 00 62 00 6f 00 61 00 72 00     ..K.e.y.b.o.a.r.
 208:	64 00 00 00                                         d...

0000020c <string1>:
 20c:	10 03 4d 00 66 00 67 00 4e 00 61 00 6d 00 65 00     ..M.f.g.N.a.m.e.
 21c:	00 00                                               ..

0000021e <string0>:
 21e:	04 03 09 04                                         ....

00000222 <config1_descriptor>:
 222:	09 02 3b 00 02 01 00 c0 32 09 04 00 00 01 03 01     ..;.....2.......
 232:	01 00 09 21 11 01 00 01 22 3f 00 07 05 83 03 08     ...!...."?......
 242:	00 01 09 04 01 00 01 03 00 00 00 09 21 11 01 00     ............!...
 252:	01 22 15 00 07 05 84 03 20 00 01                    ."...... ..

0000025d <debug_hid_report_desc>:
 25d:	06 31 ff 09 74 a1 53 75 08 15 00 26 ff 00 95 20     .1..t.Su...&... 
 26d:	09 75 81 02 c0                                      .u...

00000272 <keyboard_hid_report_desc>:
 272:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
 282:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
 292:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
 2a2:	75 08 15 00 25 68 05 07 19 00 29 68 81 00 c0        u...%h....)h...

000002b1 <device_descriptor>:
 2b1:	12 01 00 02 00 00 00 20 c0 16 7d 04 00 01 01 02     ....... ..}.....
 2c1:	00 01                                               ..

000002c3 <endpoint_config_table>:
 2c3:	00 00 01 c1 06 01 c1 26 00                          .......&.

000002cc <__ctors_end>:
 2cc:	11 24       	eor	r1, r1
 2ce:	1f be       	out	0x3f, r1	; 63
 2d0:	cf ef       	ldi	r28, 0xFF	; 255
 2d2:	da e0       	ldi	r29, 0x0A	; 10
 2d4:	de bf       	out	0x3e, r29	; 62
 2d6:	cd bf       	out	0x3d, r28	; 61

000002d8 <__do_copy_data>:
 2d8:	11 e0       	ldi	r17, 0x01	; 1
 2da:	a0 e0       	ldi	r26, 0x00	; 0
 2dc:	b1 e0       	ldi	r27, 0x01	; 1
 2de:	e2 e6       	ldi	r30, 0x62	; 98
 2e0:	fa e0       	ldi	r31, 0x0A	; 10
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <__do_copy_data+0x10>
 2e4:	05 90       	lpm	r0, Z+
 2e6:	0d 92       	st	X+, r0
 2e8:	a2 30       	cpi	r26, 0x02	; 2
 2ea:	b1 07       	cpc	r27, r17
 2ec:	d9 f7       	brne	.-10     	; 0x2e4 <__do_copy_data+0xc>

000002ee <__do_clear_bss>:
 2ee:	21 e0       	ldi	r18, 0x01	; 1
 2f0:	a2 e0       	ldi	r26, 0x02	; 2
 2f2:	b1 e0       	ldi	r27, 0x01	; 1
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <.do_clear_bss_start>

000002f6 <.do_clear_bss_loop>:
 2f6:	1d 92       	st	X+, r1

000002f8 <.do_clear_bss_start>:
 2f8:	a5 31       	cpi	r26, 0x15	; 21
 2fa:	b2 07       	cpc	r27, r18
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <.do_clear_bss_loop>
 2fe:	4f d0       	rcall	.+158    	; 0x39e <main>
 300:	ae c3       	rjmp	.+1884   	; 0xa5e <_exit>

00000302 <__bad_interrupt>:
 302:	7e ce       	rjmp	.-772    	; 0x0 <__vectors>

00000304 <led_on>:
#define LED_PIN (1 << 6)

static inline void
led_on(void)
{
	PORTD |= LED_PIN;
 304:	5e 9a       	sbi	0x0b, 6	; 11
	DDRB |=  1 << 7; // OC0A enabled
 306:	27 9a       	sbi	0x04, 7	; 4
}
 308:	08 95       	ret

0000030a <led_off>:

static inline void
led_off(void)
{
	PORTD &= ~LED_PIN;
 30a:	5e 98       	cbi	0x0b, 6	; 11
	DDRB &=  ~(1 << 7); // OC0A disabled
 30c:	27 98       	cbi	0x04, 7	; 4
}
 30e:	08 95       	ret

00000310 <busy_wait>:

static void
busy_wait(
	uint16_t delay_ticks
)
{
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	0f 92       	push	r0
 316:	cd b7       	in	r28, 0x3d	; 61
 318:	de b7       	in	r29, 0x3e	; 62
	OCR1A = TCNT1 + delay_ticks;
 31a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 31e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 322:	28 0f       	add	r18, r24
 324:	39 1f       	adc	r19, r25
 326:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 32a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIFR1 |= (1 << OCF1A);
 32e:	b1 9a       	sbi	0x16, 1	; 22

	while (bit_is_clear(TIFR1, OCF1A))
 330:	b1 9b       	sbis	0x16, 1	; 22
 332:	04 c0       	rjmp	.+8      	; 0x33c <busy_wait+0x2c>
		if (is_dah(port))
			dah_count++;
		if (is_dit(port))
			dit_count++;
	}
}
 334:	0f 90       	pop	r0
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret
		const uint8_t port = PINB;
 33c:	23 b1       	in	r18, 0x03	; 3
		if (is_dah(port))
 33e:	29 83       	std	Y+1, r18	; 0x01
	return bit_is_clear(value, 4);
 340:	89 81       	ldd	r24, Y+1	; 0x01
		if (is_dah(port))
 342:	84 fd       	sbrc	r24, 4
 344:	09 c0       	rjmp	.+18     	; 0x358 <busy_wait+0x48>
			dah_count++;
 346:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dah_count>
 34a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dah_count+0x1>
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dah_count+0x1>
 354:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dah_count>
		if (is_dit(port))
 358:	29 83       	std	Y+1, r18	; 0x01
	return bit_is_clear(value, 5);
 35a:	89 81       	ldd	r24, Y+1	; 0x01
		if (is_dit(port))
 35c:	85 fd       	sbrc	r24, 5
 35e:	e8 cf       	rjmp	.-48     	; 0x330 <busy_wait+0x20>
			dit_count++;
 360:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dit_count>
 364:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <dit_count+0x1>
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <dit_count+0x1>
 36e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dit_count>
 372:	de cf       	rjmp	.-68     	; 0x330 <busy_wait+0x20>

00000374 <bad_input>:
}


static void
bad_input(void)
{
 374:	cf 93       	push	r28
	uint8_t tccr0b = TCCR0B;
 376:	c5 b5       	in	r28, 0x25	; 37
	TCCR0B = 0x04; // Clk/256
 378:	84 e0       	ldi	r24, 0x04	; 4
 37a:	85 bd       	out	0x25, r24	; 37
	led_on();
 37c:	c3 df       	rcall	.-122    	; 0x304 <led_on>
	print("!!!\n");
 37e:	8c ea       	ldi	r24, 0xAC	; 172
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	4a d3       	rcall	.+1684   	; 0xa18 <print_P>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 384:	2f ef       	ldi	r18, 0xFF	; 255
 386:	83 ef       	ldi	r24, 0xF3	; 243
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	21 50       	subi	r18, 0x01	; 1
 38c:	80 40       	sbci	r24, 0x00	; 0
 38e:	90 40       	sbci	r25, 0x00	; 0
 390:	e1 f7       	brne	.-8      	; 0x38a <bad_input+0x16>
 392:	00 c0       	rjmp	.+0      	; 0x394 <bad_input+0x20>
	_delay_ms(40);
	led_off();
 394:	00 00       	nop
 396:	b9 df       	rcall	.-142    	; 0x30a <led_off>

	// Restore the old timer
	TCCR0B = tccr0b;
 398:	c5 bd       	out	0x25, r28	; 37
}
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <main>:


int main(void)
{
 39e:	0f 92       	push	r0
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
	uint8_t b, d, mask, i, reset_idle;
	uint8_t b_prev=0xFF, d_prev=0xFF;

	// set for 16 MHz clock
	CPU_PRESCALE(0);
 3a4:	80 e8       	ldi	r24, 0x80	; 128
 3a6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 3aa:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRD |= LED_PIN;
 3ae:	56 9a       	sbi	0x0a, 6	; 10
	led_config();

	// Configure all port B and port D pins as inputs with pullup resistors.
	// See the "Using I/O Pins" page for details.
	// http://www.pjrc.com/teensy/pins.html
	DDRD = 0x00;
 3b0:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0x00;
 3b2:	14 b8       	out	0x04, r1	; 4
	PORTB = 0xFF;
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	85 b9       	out	0x05, r24	; 5
	PORTD = 0xFF;
 3b8:	8b b9       	out	0x0b, r24	; 11

	// Initialize the USB, and then wait for the host to set configuration.
	// If the Teensy is powered without a PC connected to the USB port,
	// this will wait forever.
	usb_init();
 3ba:	99 d0       	rcall	.+306    	; 0x4ee <usb_init>
	while (!usb_configured())
 3bc:	af d0       	rcall	.+350    	; 0x51c <usb_configured>
 3be:	88 23       	and	r24, r24
 3c0:	e9 f3       	breq	.-6      	; 0x3bc <main+0x1e>
 3c2:	2f ef       	ldi	r18, 0xFF	; 255
 3c4:	83 ed       	ldi	r24, 0xD3	; 211
 3c6:	90 e3       	ldi	r25, 0x30	; 48
 3c8:	21 50       	subi	r18, 0x01	; 1
 3ca:	80 40       	sbci	r24, 0x00	; 0
 3cc:	90 40       	sbci	r25, 0x00	; 0
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <main+0x2a>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <main+0x34>
 3d2:	00 00       	nop
 3d4:	14 bc       	out	0x24, r1	; 36

	// 
	// 256*1024 clock cycles, or approx 61 Hz when using 16 MHz clock
	// This demonstrates how to use interrupts to implement a simple
	// inactivity timeout.
	TCCR0A = 0x00;
 3d6:	85 e0       	ldi	r24, 0x05	; 5
	TCCR0B = 0x05;
 3d8:	85 bd       	out	0x25, r24	; 37
 3da:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	//TIMSK0 = (1<<TOIE0);

	// TCNT1 runs at CLK/1024, which is 0.064 ms per tick
	// This is pretty close to 16 ticks/ms.  The output compare
	// sets OCF flag on match
	TCCR1B = 5; // clk/1024
 3de:	83 ec       	ldi	r24, 0xC3	; 195

	// TCNT0 is configured for a 500 Hz tone on OC0A
	// At CLK/64, this is turns on and off each time
	// a full counter is made, which creates a 488 Hz
	// square wave.
	TCCR0A = (1 << COM0A0) | (1 << COM0A1) | 0x03;
 3e0:	84 bd       	out	0x24, r24	; 36
 3e2:	83 e0       	ldi	r24, 0x03	; 3
	TCCR0B = 0x03; // CLK/64
 3e4:	85 bd       	out	0x25, r24	; 37
 3e6:	80 e8       	ldi	r24, 0x80	; 128
	OCR0A = 0x80; // low volume
 3e8:	87 bd       	out	0x27, r24	; 39

	// Set mode to fast, inverted PWM
	
	led_off();
 3ea:	8f df       	rcall	.-226    	; 0x30a <led_off>
 3ec:	00 e0       	ldi	r16, 0x00	; 0

	uint8_t value = 1;
 3ee:	11 e0       	ldi	r17, 0x01	; 1
 3f0:	83 b1       	in	r24, 0x03	; 3
		{
			// Too many symbols.  Ignore it
			bad_input();
			goto reset;
		} else
		if (is_dit(PINB))
 3f2:	89 83       	std	Y+1, r24	; 0x01
 3f4:	89 81       	ldd	r24, Y+1	; 0x01
	return bit_is_clear(value, 5);
 3f6:	85 fd       	sbrc	r24, 5
		if (is_dit(PINB))
 3f8:	20 c0       	rjmp	.+64     	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
 3fa:	0f 5f       	subi	r16, 0xFF	; 255
		{
			// The dit key is held down and
			// If the last bit sent was also a dit and the
			// dah switch is enabled, send a dah instead.
start_dit_bit:
			bits++;
 3fc:	11 0f       	add	r17, r17
			value <<= 1;
			print(".");
 3fe:	87 eb       	ldi	r24, 0xB7	; 183
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	0a d3       	rcall	.+1556   	; 0xa18 <print_P>
 404:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <dah_count+0x1>
	dit_count = dah_count = 0;
 408:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <dah_count>
 40c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <dit_count+0x1>
 410:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <dit_count>
	led_on();
 414:	77 df       	rcall	.-274    	; 0x304 <led_on>
	busy_wait(on_ticks);
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	94 e0       	ldi	r25, 0x04	; 4
 41a:	7a df       	rcall	.-268    	; 0x310 <busy_wait>
	led_off();
 41c:	76 df       	rcall	.-276    	; 0x30a <led_off>
 41e:	80 e0       	ldi	r24, 0x00	; 0
	busy_wait(off_ticks);
 420:	94 e0       	ldi	r25, 0x04	; 4
 422:	76 df       	rcall	.-276    	; 0x310 <busy_wait>
 424:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dah_count>

			wait(dit_time, dit_time);
			if (dah_count > button_threshold)
 428:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dah_count+0x1>
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	90 44       	sbci	r25, 0x40	; 64
 430:	48 f4       	brcc	.+18     	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
 432:	08 30       	cpi	r16, 0x08	; 8
		if (bits > 7)
 434:	e8 f2       	brcs	.-70     	; 0x3f0 <main+0x52>
 436:	9e df       	rcall	.-196    	; 0x374 <bad_input>
			bad_input();
 438:	d9 cf       	rjmp	.-78     	; 0x3ec <main+0x4e>
 43a:	83 b1       	in	r24, 0x03	; 3
			goto reset;
 43c:	89 83       	std	Y+1, r24	; 0x01
				goto start_dah_bit;

			continue;
		} else
		if (is_dah(PINB))
 43e:	89 81       	ldd	r24, Y+1	; 0x01
	return bit_is_clear(value, 4);
 440:	84 fd       	sbrc	r24, 4
		if (is_dah(PINB))
 442:	1f c0       	rjmp	.+62     	; 0x482 <__FUSE_REGION_LENGTH__+0x82>
 444:	0f 5f       	subi	r16, 0xFF	; 255
		{
start_dah_bit:
			bits++;
 446:	11 0f       	add	r17, r17
			value = (value << 1) | 1;
 448:	11 60       	ori	r17, 0x01	; 1
 44a:	85 eb       	ldi	r24, 0xB5	; 181
			print("-");
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	e4 d2       	rcall	.+1480   	; 0xa18 <print_P>
 450:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <dah_count+0x1>
	dit_count = dah_count = 0;
 454:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <dah_count>
 458:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <dit_count+0x1>
	led_on();
 45c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <dit_count>
	busy_wait(on_ticks);
 460:	51 df       	rcall	.-350    	; 0x304 <led_on>
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	9c e0       	ldi	r25, 0x0C	; 12
 466:	54 df       	rcall	.-344    	; 0x310 <busy_wait>
	led_off();
 468:	50 df       	rcall	.-352    	; 0x30a <led_off>
 46a:	80 e0       	ldi	r24, 0x00	; 0
	busy_wait(off_ticks);
 46c:	94 e0       	ldi	r25, 0x04	; 4
 46e:	50 df       	rcall	.-352    	; 0x310 <busy_wait>
 470:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dit_count>

			wait(3*dit_time, dit_time);
			if (dit_count > button_threshold)
 474:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <dit_count+0x1>
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	90 44       	sbci	r25, 0x40	; 64
 47c:	08 f0       	brcs	.+2      	; 0x480 <__FUSE_REGION_LENGTH__+0x80>
 47e:	bd cf       	rjmp	.-134    	; 0x3fa <main+0x5c>
 480:	d8 cf       	rjmp	.-80     	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
 482:	00 23       	and	r16, r16
 484:	09 f4       	brne	.+2      	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
				goto start_dit_bit;

			continue;
		} else
		if (bits == 0)
 486:	b4 cf       	rjmp	.-152    	; 0x3f0 <main+0x52>
 488:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
		// Neither key is held down and the single space time
		// has elapsed (since wait_delay is blocking).

		// Delay one more cycle to be sure, abort the delay
		// as soon as a button is pressed
		OCR1A = TCNT1 + dit_time * 2;
 48c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 490:	98 5f       	subi	r25, 0xF8	; 248
 492:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 496:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		TIFR1 |= (1 << OCF1A);
 49a:	b1 9a       	sbi	0x16, 1	; 22

		while (bit_is_clear(TIFR1, OCF1A))
 49c:	b1 9b       	sbis	0x16, 1	; 22
 49e:	19 c0       	rjmp	.+50     	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
				goto start_dit_bit;
		}

		// Timeout has passed; check to see if the
		// value exist in the map
		uint8_t c = pgm_read_byte(&morse[value]);
 4a0:	e1 2f       	mov	r30, r17
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	eb 54       	subi	r30, 0x4B	; 75
 4a6:	ff 4f       	sbci	r31, 0xFF	; 255

		//last_send_time = now();
		print(" = ");
 4a8:	04 91       	lpm	r16, Z
 4aa:	81 eb       	ldi	r24, 0xB1	; 177
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	b4 d2       	rcall	.+1384   	; 0xa18 <print_P>
		phex(value);
 4b0:	81 2f       	mov	r24, r17
 4b2:	cc d2       	rcall	.+1432   	; 0xa4c <phex>

		if (!c)
 4b4:	00 23       	and	r16, r16
 4b6:	09 f4       	brne	.+2      	; 0x4ba <__FUSE_REGION_LENGTH__+0xba>
 4b8:	be cf       	rjmp	.-132    	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
		{
			bad_input();
			goto reset;
		}

		pchar('\n');
 4ba:	8a e0       	ldi	r24, 0x0A	; 10
 4bc:	77 d0       	rcall	.+238    	; 0x5ac <usb_debug_putchar>
 4be:	60 2f       	mov	r22, r16
		
		const uint8_t modbit = c & 0x80 ? KEY_SHIFT : 0;
 4c0:	66 fb       	bst	r22, 6
 4c2:	66 0f       	add	r22, r22
 4c4:	66 0b       	sbc	r22, r22
 4c6:	60 f9       	bld	r22, 0
 4c8:	62 70       	andi	r22, 0x02	; 2
 4ca:	80 2f       	mov	r24, r16
		c &= ~0x80;
		usb_keyboard_press(c, modbit);
 4cc:	8f 77       	andi	r24, 0x7F	; 127
 4ce:	61 d0       	rcall	.+194    	; 0x592 <usb_keyboard_press>
 4d0:	8d cf       	rjmp	.-230    	; 0x3ec <main+0x4e>
 4d2:	83 b1       	in	r24, 0x03	; 3
 4d4:	89 83       	std	Y+1, r24	; 0x01
			const uint8_t port = PINB;
 4d6:	89 81       	ldd	r24, Y+1	; 0x01
			if (is_dah(port))
 4d8:	84 ff       	sbrs	r24, 4
	return bit_is_clear(value, 4);
 4da:	b4 cf       	rjmp	.-152    	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
			if (is_dah(port))
 4dc:	89 81       	ldd	r24, Y+1	; 0x01
 4de:	85 fd       	sbrc	r24, 5
	return bit_is_clear(value, 5);
 4e0:	dd cf       	rjmp	.-70     	; 0x49c <__FUSE_REGION_LENGTH__+0x9c>
			if (is_dit(port))
 4e2:	8b cf       	rjmp	.-234    	; 0x3fa <main+0x5c>

000004e4 <usb_wait_in_ready>:


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 4e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 4e8:	80 ff       	sbrs	r24, 0
 4ea:	fc cf       	rjmp	.-8      	; 0x4e4 <usb_wait_in_ready>
}
 4ec:	08 95       	ret

000004ee <usb_init>:
	HW_CONFIG();
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
	USB_FREEZE();				// enable USB
 4f4:	80 ea       	ldi	r24, 0xA0	; 160
 4f6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	PLL_CONFIG();				// config PLL
 4fa:	82 e1       	ldi	r24, 0x12	; 18
 4fc:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 4fe:	09 b4       	in	r0, 0x29	; 41
 500:	00 fe       	sbrs	r0, 0
 502:	fd cf       	rjmp	.-6      	; 0x4fe <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 504:	80 e9       	ldi	r24, 0x90	; 144
 506:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
        UDCON = 0;				// enable attach resistor
 50a:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	usb_configuration = 0;
 50e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <usb_configuration>
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 512:	8c e0       	ldi	r24, 0x0C	; 12
 514:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	sei();
 518:	78 94       	sei
}
 51a:	08 95       	ret

0000051c <usb_configured>:
	return usb_configuration;
 51c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <usb_configuration>
}
 520:	08 95       	ret

00000522 <usb_keyboard_send>:
	if (!usb_configuration) return -1;
 522:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <usb_configuration>
 526:	81 11       	cpse	r24, r1
 528:	02 c0       	rjmp	.+4      	; 0x52e <usb_keyboard_send+0xc>
 52a:	8f ef       	ldi	r24, 0xFF	; 255
 52c:	08 95       	ret
	intr_state = SREG;
 52e:	8f b7       	in	r24, 0x3f	; 63
	cli();
 530:	f8 94       	cli
	UENUM = KEYBOARD_ENDPOINT;
 532:	93 e0       	ldi	r25, 0x03	; 3
 534:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	timeout = UDFNUML + 50;
 538:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 53c:	9e 5c       	subi	r25, 0xCE	; 206
		UENUM = KEYBOARD_ENDPOINT;
 53e:	23 e0       	ldi	r18, 0x03	; 3
		if (UEINTX & (1<<RWAL)) break;
 540:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 544:	35 fd       	sbrc	r19, 5
 546:	0e c0       	rjmp	.+28     	; 0x564 <usb_keyboard_send+0x42>
		SREG = intr_state;
 548:	8f bf       	out	0x3f, r24	; 63
		if (!usb_configuration) return -1;
 54a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <usb_configuration>
 54e:	88 23       	and	r24, r24
 550:	61 f3       	breq	.-40     	; 0x52a <usb_keyboard_send+0x8>
		if (UDFNUML == timeout) return -1;
 552:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 556:	89 17       	cp	r24, r25
 558:	41 f3       	breq	.-48     	; 0x52a <usb_keyboard_send+0x8>
		intr_state = SREG;
 55a:	8f b7       	in	r24, 0x3f	; 63
		cli();
 55c:	f8 94       	cli
		UENUM = KEYBOARD_ENDPOINT;
 55e:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (UEINTX & (1<<RWAL)) break;
 562:	ee cf       	rjmp	.-36     	; 0x540 <usb_keyboard_send+0x1e>
	UEDATX = keyboard_modifier_keys;
 564:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <keyboard_modifier_keys>
 568:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	UEDATX = 0;
 56c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	for (i=0; i<6; i++) {
 570:	e9 e0       	ldi	r30, 0x09	; 9
 572:	f1 e0       	ldi	r31, 0x01	; 1
		UEDATX = keyboard_keys[i];
 574:	91 91       	ld	r25, Z+
 576:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	for (i=0; i<6; i++) {
 57a:	91 e0       	ldi	r25, 0x01	; 1
 57c:	ef 30       	cpi	r30, 0x0F	; 15
 57e:	f9 07       	cpc	r31, r25
 580:	c9 f7       	brne	.-14     	; 0x574 <usb_keyboard_send+0x52>
	UEINTX = 0x3A;
 582:	9a e3       	ldi	r25, 0x3A	; 58
 584:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	keyboard_idle_count = 0;
 588:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <keyboard_idle_count>
	SREG = intr_state;
 58c:	8f bf       	out	0x3f, r24	; 63
	return 0;
 58e:	80 e0       	ldi	r24, 0x00	; 0
}
 590:	08 95       	ret

00000592 <usb_keyboard_press>:
	keyboard_modifier_keys = modifier;
 592:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <keyboard_modifier_keys>
	keyboard_keys[0] = key;
 596:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <keyboard_keys>
	r = usb_keyboard_send();
 59a:	c3 df       	rcall	.-122    	; 0x522 <usb_keyboard_send>
	if (r) return r;
 59c:	81 11       	cpse	r24, r1
 59e:	05 c0       	rjmp	.+10     	; 0x5aa <usb_keyboard_press+0x18>
	keyboard_modifier_keys = 0;
 5a0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <keyboard_modifier_keys>
	keyboard_keys[0] = 0;
 5a4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <keyboard_keys>
	return usb_keyboard_send();
 5a8:	bc cf       	rjmp	.-136    	; 0x522 <usb_keyboard_send>
}
 5aa:	08 95       	ret

000005ac <usb_debug_putchar>:
	if (!usb_configuration) return -1;
 5ac:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <usb_configuration>
 5b0:	91 11       	cpse	r25, r1
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <usb_debug_putchar+0xc>
			return -1;
 5b4:	8f ef       	ldi	r24, 0xFF	; 255
 5b6:	08 95       	ret
	intr_state = SREG;
 5b8:	9f b7       	in	r25, 0x3f	; 63
	cli();
 5ba:	f8 94       	cli
	UENUM = DEBUG_TX_ENDPOINT;
 5bc:	24 e0       	ldi	r18, 0x04	; 4
 5be:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	if (previous_timeout) {
 5c2:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <previous_timeout.1721>
 5c6:	22 23       	and	r18, r18
 5c8:	41 f0       	breq	.+16     	; 0x5da <usb_debug_putchar+0x2e>
		if (!(UEINTX & (1<<RWAL))) {
 5ca:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5ce:	25 fd       	sbrc	r18, 5
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <usb_debug_putchar+0x2a>
			SREG = intr_state;
 5d2:	9f bf       	out	0x3f, r25	; 63
 5d4:	ef cf       	rjmp	.-34     	; 0x5b4 <usb_debug_putchar+0x8>
		previous_timeout = 0;
 5d6:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <previous_timeout.1721>
	timeout = UDFNUML + 4;
 5da:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 5de:	2c 5f       	subi	r18, 0xFC	; 252
		UENUM = DEBUG_TX_ENDPOINT;
 5e0:	34 e0       	ldi	r19, 0x04	; 4
		if (UEINTX & (1<<RWAL)) break;
 5e2:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5e6:	45 fd       	sbrc	r20, 5
 5e8:	12 c0       	rjmp	.+36     	; 0x60e <usb_debug_putchar+0x62>
		SREG = intr_state;
 5ea:	9f bf       	out	0x3f, r25	; 63
		if (UDFNUML == timeout) {
 5ec:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 5f0:	92 13       	cpse	r25, r18
 5f2:	04 c0       	rjmp	.+8      	; 0x5fc <usb_debug_putchar+0x50>
			previous_timeout = 1;
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <previous_timeout.1721>
			return -1;
 5fa:	dc cf       	rjmp	.-72     	; 0x5b4 <usb_debug_putchar+0x8>
		if (!usb_configuration) return -1;
 5fc:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <usb_configuration>
 600:	99 23       	and	r25, r25
 602:	c1 f2       	breq	.-80     	; 0x5b4 <usb_debug_putchar+0x8>
		intr_state = SREG;
 604:	9f b7       	in	r25, 0x3f	; 63
		cli();
 606:	f8 94       	cli
		UENUM = DEBUG_TX_ENDPOINT;
 608:	30 93 e9 00 	sts	0x00E9, r19	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (UEINTX & (1<<RWAL)) break;
 60c:	ea cf       	rjmp	.-44     	; 0x5e2 <usb_debug_putchar+0x36>
	UEDATX = c;
 60e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	if (!(UEINTX & (1<<RWAL))) {
 612:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 616:	85 fd       	sbrc	r24, 5
 618:	08 c0       	rjmp	.+16     	; 0x62a <usb_debug_putchar+0x7e>
		UEINTX = 0x3A;
 61a:	8a e3       	ldi	r24, 0x3A	; 58
 61c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		debug_flush_timer = 0;
 620:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <debug_flush_timer>
	SREG = intr_state;
 624:	9f bf       	out	0x3f, r25	; 63
	return 0;
 626:	80 e0       	ldi	r24, 0x00	; 0
}
 628:	08 95       	ret
		debug_flush_timer = 2;
 62a:	82 e0       	ldi	r24, 0x02	; 2
 62c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <debug_flush_timer>
 630:	f9 cf       	rjmp	.-14     	; 0x624 <usb_debug_putchar+0x78>

00000632 <__vector_10>:
{
 632:	1f 92       	push	r1
 634:	1f b6       	in	r1, 0x3f	; 63
 636:	1f 92       	push	r1
 638:	11 24       	eor	r1, r1
 63a:	8f 93       	push	r24
 63c:	9f 93       	push	r25
 63e:	ef 93       	push	r30
 640:	ff 93       	push	r31
        intbits = UDINT;
 642:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        UDINT = 0;
 646:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        if (intbits & (1<<EORSTI)) {
 64a:	83 ff       	sbrs	r24, 3
 64c:	0f c0       	rjmp	.+30     	; 0x66c <__vector_10+0x3a>
		UENUM = 0;
 64e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
 658:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 65c:	92 e2       	ldi	r25, 0x22	; 34
 65e:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
 662:	98 e0       	ldi	r25, 0x08	; 8
 664:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
 668:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <usb_configuration>
	if ((intbits & (1<<SOFI)) && usb_configuration) {
 66c:	82 ff       	sbrs	r24, 2
 66e:	47 c0       	rjmp	.+142    	; 0x6fe <__vector_10+0xcc>
 670:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <usb_configuration>
 674:	88 23       	and	r24, r24
 676:	09 f4       	brne	.+2      	; 0x67a <__vector_10+0x48>
 678:	42 c0       	rjmp	.+132    	; 0x6fe <__vector_10+0xcc>
		t = debug_flush_timer;
 67a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <debug_flush_timer>
		if (t) {
 67e:	88 23       	and	r24, r24
 680:	79 f0       	breq	.+30     	; 0x6a0 <__vector_10+0x6e>
			debug_flush_timer = -- t;
 682:	81 50       	subi	r24, 0x01	; 1
 684:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <debug_flush_timer>
			if (!t) {
 688:	81 11       	cpse	r24, r1
 68a:	0a c0       	rjmp	.+20     	; 0x6a0 <__vector_10+0x6e>
				UENUM = DEBUG_TX_ENDPOINT;
 68c:	84 e0       	ldi	r24, 0x04	; 4
 68e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				while ((UEINTX & (1<<RWAL))) {
 692:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 696:	85 fd       	sbrc	r24, 5
 698:	3a c0       	rjmp	.+116    	; 0x70e <__vector_10+0xdc>
				UEINTX = 0x3A;
 69a:	8a e3       	ldi	r24, 0x3A	; 58
 69c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (keyboard_idle_config && (++div4 & 3) == 0) {
 6a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <keyboard_idle_config>
 6a4:	88 23       	and	r24, r24
 6a6:	59 f1       	breq	.+86     	; 0x6fe <__vector_10+0xcc>
 6a8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <div4.1741>
 6ac:	8f 5f       	subi	r24, 0xFF	; 255
 6ae:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <div4.1741>
 6b2:	83 70       	andi	r24, 0x03	; 3
 6b4:	21 f5       	brne	.+72     	; 0x6fe <__vector_10+0xcc>
			UENUM = KEYBOARD_ENDPOINT;
 6b6:	83 e0       	ldi	r24, 0x03	; 3
 6b8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			if (UEINTX & (1<<RWAL)) {
 6bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6c0:	85 ff       	sbrs	r24, 5
 6c2:	1d c0       	rjmp	.+58     	; 0x6fe <__vector_10+0xcc>
				keyboard_idle_count++;
 6c4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <keyboard_idle_count>
 6c8:	8f 5f       	subi	r24, 0xFF	; 255
 6ca:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <keyboard_idle_count>
				if (keyboard_idle_count == keyboard_idle_config) {
 6ce:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <keyboard_idle_config>
 6d2:	89 13       	cpse	r24, r25
 6d4:	14 c0       	rjmp	.+40     	; 0x6fe <__vector_10+0xcc>
					keyboard_idle_count = 0;
 6d6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <keyboard_idle_count>
					UEDATX = keyboard_modifier_keys;
 6da:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <keyboard_modifier_keys>
 6de:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEDATX = 0;
 6e2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					for (i=0; i<6; i++) {
 6e6:	e9 e0       	ldi	r30, 0x09	; 9
 6e8:	f1 e0       	ldi	r31, 0x01	; 1
						UEDATX = keyboard_keys[i];
 6ea:	81 91       	ld	r24, Z+
 6ec:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					for (i=0; i<6; i++) {
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	ef 30       	cpi	r30, 0x0F	; 15
 6f4:	f8 07       	cpc	r31, r24
 6f6:	c9 f7       	brne	.-14     	; 0x6ea <__vector_10+0xb8>
					UEINTX = 0x3A;
 6f8:	8a e3       	ldi	r24, 0x3A	; 58
 6fa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
 6fe:	ff 91       	pop	r31
 700:	ef 91       	pop	r30
 702:	9f 91       	pop	r25
 704:	8f 91       	pop	r24
 706:	1f 90       	pop	r1
 708:	1f be       	out	0x3f, r1	; 63
 70a:	1f 90       	pop	r1
 70c:	18 95       	reti
					UEDATX = 0;
 70e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 712:	bf cf       	rjmp	.-130    	; 0x692 <__vector_10+0x60>

00000714 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 714:	1f 92       	push	r1
 716:	0f 92       	push	r0
 718:	0f b6       	in	r0, 0x3f	; 63
 71a:	0f 92       	push	r0
 71c:	11 24       	eor	r1, r1
 71e:	ef 92       	push	r14
 720:	ff 92       	push	r15
 722:	0f 93       	push	r16
 724:	1f 93       	push	r17
 726:	2f 93       	push	r18
 728:	3f 93       	push	r19
 72a:	4f 93       	push	r20
 72c:	5f 93       	push	r21
 72e:	6f 93       	push	r22
 730:	7f 93       	push	r23
 732:	8f 93       	push	r24
 734:	9f 93       	push	r25
 736:	af 93       	push	r26
 738:	bf 93       	push	r27
 73a:	cf 93       	push	r28
 73c:	df 93       	push	r29
 73e:	ef 93       	push	r30
 740:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 742:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	intbits = UEINTX;
 746:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (intbits & (1<<RXSTPI)) {
 74a:	83 ff       	sbrs	r24, 3
 74c:	71 c0       	rjmp	.+226    	; 0x830 <__vector_11+0x11c>
                bmRequestType = UEDATX;
 74e:	d0 91 f1 00 	lds	r29, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                bRequest = UEDATX;
 752:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wValue = UEDATX;
 756:	00 91 f1 00 	lds	r16, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wValue |= (UEDATX << 8);
 75a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 75e:	18 2f       	mov	r17, r24
                wIndex = UEDATX;
 760:	e0 90 f1 00 	lds	r14, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wIndex |= (UEDATX << 8);
 764:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 768:	f8 2e       	mov	r15, r24
                wLength = UEDATX;
 76a:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wLength |= (UEDATX << 8);
 76e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 772:	38 2f       	mov	r19, r24
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 774:	82 ef       	ldi	r24, 0xF2	; 242
 776:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
 77a:	c6 30       	cpi	r28, 0x06	; 6
 77c:	09 f0       	breq	.+2      	; 0x780 <__vector_11+0x6c>
 77e:	64 c0       	rjmp	.+200    	; 0x848 <__vector_11+0x134>
 780:	89 eb       	ldi	r24, 0xB9	; 185
 782:	91 e0       	ldi	r25, 0x01	; 1
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
 784:	fc 01       	movw	r30, r24
 786:	45 91       	lpm	r20, Z+
 788:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
 78a:	04 17       	cp	r16, r20
 78c:	15 07       	cpc	r17, r21
 78e:	09 f0       	breq	.+2      	; 0x792 <__vector_11+0x7e>
 790:	49 c0       	rjmp	.+146    	; 0x824 <__vector_11+0x110>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 792:	fc 01       	movw	r30, r24
 794:	32 96       	adiw	r30, 0x02	; 2
 796:	45 91       	lpm	r20, Z+
 798:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
 79a:	e4 16       	cp	r14, r20
 79c:	f5 06       	cpc	r15, r21
 79e:	09 f0       	breq	.+2      	; 0x7a2 <__vector_11+0x8e>
 7a0:	41 c0       	rjmp	.+130    	; 0x824 <__vector_11+0x110>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 7a2:	fc 01       	movw	r30, r24
 7a4:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 7a6:	45 91       	lpm	r20, Z+
 7a8:	54 91       	lpm	r21, Z
				list += 2;
 7aa:	06 96       	adiw	r24, 0x06	; 6
				desc_length = pgm_read_byte(list);
 7ac:	fc 01       	movw	r30, r24
 7ae:	84 91       	lpm	r24, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 7b0:	2f 3f       	cpi	r18, 0xFF	; 255
 7b2:	31 05       	cpc	r19, r1
 7b4:	19 f0       	breq	.+6      	; 0x7bc <__vector_11+0xa8>
 7b6:	10 f0       	brcs	.+4      	; 0x7bc <__vector_11+0xa8>
 7b8:	2f ef       	ldi	r18, 0xFF	; 255
 7ba:	30 e0       	ldi	r19, 0x00	; 0
			if (len > desc_length) len = desc_length;
 7bc:	28 17       	cp	r18, r24
 7be:	08 f4       	brcc	.+2      	; 0x7c2 <__vector_11+0xae>
 7c0:	82 2f       	mov	r24, r18
	UEINTX = ~(1<<TXINI);
 7c2:	3e ef       	ldi	r19, 0xFE	; 254
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 7c4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 7c8:	29 2f       	mov	r18, r25
 7ca:	25 70       	andi	r18, 0x05	; 5
 7cc:	d9 f3       	breq	.-10     	; 0x7c4 <__vector_11+0xb0>
				if (i & (1<<RXOUTI)) return;	// abort
 7ce:	92 fd       	sbrc	r25, 2
 7d0:	12 c0       	rjmp	.+36     	; 0x7f6 <__vector_11+0xe2>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 7d2:	98 2f       	mov	r25, r24
 7d4:	81 32       	cpi	r24, 0x21	; 33
 7d6:	08 f0       	brcs	.+2      	; 0x7da <__vector_11+0xc6>
 7d8:	90 e2       	ldi	r25, 0x20	; 32
				for (i = n; i; i--) {
 7da:	fa 01       	movw	r30, r20
 7dc:	29 2f       	mov	r18, r25
 7de:	21 11       	cpse	r18, r1
 7e0:	2d c0       	rjmp	.+90     	; 0x83c <__vector_11+0x128>
 7e2:	49 0f       	add	r20, r25
 7e4:	51 1d       	adc	r21, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 7e6:	28 2f       	mov	r18, r24
 7e8:	29 1b       	sub	r18, r25
	UEINTX = ~(1<<TXINI);
 7ea:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 7ee:	89 13       	cpse	r24, r25
 7f0:	23 c0       	rjmp	.+70     	; 0x838 <__vector_11+0x124>
 7f2:	80 32       	cpi	r24, 0x20	; 32
 7f4:	08 f5       	brcc	.+66     	; 0x838 <__vector_11+0x124>
				return;
			}
		}
	}
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 7f6:	ff 91       	pop	r31
 7f8:	ef 91       	pop	r30
 7fa:	df 91       	pop	r29
 7fc:	cf 91       	pop	r28
 7fe:	bf 91       	pop	r27
 800:	af 91       	pop	r26
 802:	9f 91       	pop	r25
 804:	8f 91       	pop	r24
 806:	7f 91       	pop	r23
 808:	6f 91       	pop	r22
 80a:	5f 91       	pop	r21
 80c:	4f 91       	pop	r20
 80e:	3f 91       	pop	r19
 810:	2f 91       	pop	r18
 812:	1f 91       	pop	r17
 814:	0f 91       	pop	r16
 816:	ff 90       	pop	r15
 818:	ef 90       	pop	r14
 81a:	0f 90       	pop	r0
 81c:	0f be       	out	0x3f, r0	; 63
 81e:	0f 90       	pop	r0
 820:	1f 90       	pop	r1
 822:	18 95       	reti
				if (i >= NUM_DESC_LIST) {
 824:	07 96       	adiw	r24, 0x07	; 7
 826:	f1 e0       	ldi	r31, 0x01	; 1
 828:	88 3f       	cpi	r24, 0xF8	; 248
 82a:	9f 07       	cpc	r25, r31
 82c:	09 f0       	breq	.+2      	; 0x830 <__vector_11+0x11c>
 82e:	aa cf       	rjmp	.-172    	; 0x784 <__vector_11+0x70>
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 830:	81 e2       	ldi	r24, 0x21	; 33
 832:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 836:	df cf       	rjmp	.-66     	; 0x7f6 <__vector_11+0xe2>
{
 838:	82 2f       	mov	r24, r18
 83a:	c4 cf       	rjmp	.-120    	; 0x7c4 <__vector_11+0xb0>
					UEDATX = pgm_read_byte(desc_addr++);
 83c:	64 91       	lpm	r22, Z
 83e:	60 93 f1 00 	sts	0x00F1, r22	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				for (i = n; i; i--) {
 842:	21 50       	subi	r18, 0x01	; 1
 844:	31 96       	adiw	r30, 0x01	; 1
 846:	cb cf       	rjmp	.-106    	; 0x7de <__vector_11+0xca>
		if (bRequest == SET_ADDRESS) {
 848:	c5 30       	cpi	r28, 0x05	; 5
 84a:	41 f4       	brne	.+16     	; 0x85c <__vector_11+0x148>
	UEINTX = ~(1<<TXINI);
 84c:	8e ef       	ldi	r24, 0xFE	; 254
 84e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			usb_wait_in_ready();
 852:	48 de       	rcall	.-880    	; 0x4e4 <usb_wait_in_ready>
			UDADDR = wValue | (1<<ADDEN);
 854:	00 68       	ori	r16, 0x80	; 128
 856:	00 93 e3 00 	sts	0x00E3, r16	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			return;
 85a:	cd cf       	rjmp	.-102    	; 0x7f6 <__vector_11+0xe2>
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 85c:	c9 30       	cpi	r28, 0x09	; 9
 85e:	49 f5       	brne	.+82     	; 0x8b2 <__vector_11+0x19e>
 860:	d1 11       	cpse	r29, r1
 862:	6a c0       	rjmp	.+212    	; 0x938 <__vector_11+0x224>
			usb_configuration = wValue;
 864:	00 93 14 01 	sts	0x0114, r16	; 0x800114 <usb_configuration>
	UEINTX = ~(1<<TXINI);
 868:	8e ef       	ldi	r24, 0xFE	; 254
 86a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			for (i=1; i<5; i++) {
 86e:	21 e0       	ldi	r18, 0x01	; 1
			cfg = endpoint_config_table;
 870:	83 ec       	ldi	r24, 0xC3	; 195
 872:	92 e0       	ldi	r25, 0x02	; 2
				UENUM = i;
 874:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				en = pgm_read_byte(cfg++);
 878:	ac 01       	movw	r20, r24
 87a:	4f 5f       	subi	r20, 0xFF	; 255
 87c:	5f 4f       	sbci	r21, 0xFF	; 255
 87e:	fc 01       	movw	r30, r24
 880:	34 91       	lpm	r19, Z
				UECONX = en;
 882:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				if (en) {
 886:	33 23       	and	r19, r19
 888:	91 f0       	breq	.+36     	; 0x8ae <__vector_11+0x19a>
					UECFG0X = pgm_read_byte(cfg++);
 88a:	fa 01       	movw	r30, r20
 88c:	44 91       	lpm	r20, Z
 88e:	40 93 ec 00 	sts	0x00EC, r20	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
					UECFG1X = pgm_read_byte(cfg++);
 892:	31 96       	adiw	r30, 0x01	; 1
 894:	e4 91       	lpm	r30, Z
 896:	03 96       	adiw	r24, 0x03	; 3
 898:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			for (i=1; i<5; i++) {
 89c:	2f 5f       	subi	r18, 0xFF	; 255
 89e:	25 30       	cpi	r18, 0x05	; 5
 8a0:	49 f7       	brne	.-46     	; 0x874 <__vector_11+0x160>
        		UERST = 0x1E;
 8a2:	8e e1       	ldi	r24, 0x1E	; 30
					UERST = (1 << i);
 8a4:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UERST = 0;
 8a8:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
 8ac:	a4 cf       	rjmp	.-184    	; 0x7f6 <__vector_11+0xe2>
				en = pgm_read_byte(cfg++);
 8ae:	ca 01       	movw	r24, r20
 8b0:	f5 cf       	rjmp	.-22     	; 0x89c <__vector_11+0x188>
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 8b2:	c8 30       	cpi	r28, 0x08	; 8
 8b4:	49 f4       	brne	.+18     	; 0x8c8 <__vector_11+0x1b4>
 8b6:	d0 38       	cpi	r29, 0x80	; 128
 8b8:	09 f0       	breq	.+2      	; 0x8bc <__vector_11+0x1a8>
			usb_wait_in_ready();
 8ba:	3e c0       	rjmp	.+124    	; 0x938 <__vector_11+0x224>
 8bc:	13 de       	rcall	.-986    	; 0x4e4 <usb_wait_in_ready>
			UEDATX = usb_configuration;
 8be:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <usb_configuration>
					UEDATX = keyboard_protocol;
 8c2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	UEINTX = ~(1<<TXINI);
 8c6:	12 c0       	rjmp	.+36     	; 0x8ec <__vector_11+0x1d8>
		if (bRequest == GET_STATUS) {
 8c8:	c1 11       	cpse	r28, r1
			usb_wait_in_ready();
 8ca:	14 c0       	rjmp	.+40     	; 0x8f4 <__vector_11+0x1e0>
 8cc:	0b de       	rcall	.-1002   	; 0x4e4 <usb_wait_in_ready>
			if (bmRequestType == 0x82) {
 8ce:	d2 38       	cpi	r29, 0x82	; 130
 8d0:	49 f4       	brne	.+18     	; 0x8e4 <__vector_11+0x1d0>
				UENUM = wIndex;
 8d2:	e0 92 e9 00 	sts	0x00E9, r14	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (UECONX & (1<<STALLRQ)) i = 1;
 8d6:	c0 91 eb 00 	lds	r28, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 8da:	c5 fb       	bst	r28, 5
 8dc:	cc 27       	eor	r28, r28
 8de:	c0 f9       	bld	r28, 0
				UENUM = 0;
 8e0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			UEDATX = i;
 8e4:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			UEDATX = 0;
 8e8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	UEINTX = ~(1<<TXINI);
 8ec:	8e ef       	ldi	r24, 0xFE	; 254
 8ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					return;
 8f2:	81 cf       	rjmp	.-254    	; 0x7f6 <__vector_11+0xe2>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 8f4:	8c 2f       	mov	r24, r28
 8f6:	8d 7f       	andi	r24, 0xFD	; 253
 8f8:	81 30       	cpi	r24, 0x01	; 1
 8fa:	f1 f4       	brne	.+60     	; 0x938 <__vector_11+0x224>
		  && bmRequestType == 0x02 && wValue == 0) {
 8fc:	d2 30       	cpi	r29, 0x02	; 2
 8fe:	e1 f4       	brne	.+56     	; 0x938 <__vector_11+0x224>
 900:	01 2b       	or	r16, r17
 902:	09 f0       	breq	.+2      	; 0x906 <__vector_11+0x1f2>
 904:	61 c0       	rjmp	.+194    	; 0x9c8 <__vector_11+0x2b4>
			i = wIndex & 0x7F;
 906:	4e 2d       	mov	r20, r14
 908:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 90a:	8f ef       	ldi	r24, 0xFF	; 255
 90c:	84 0f       	add	r24, r20
 90e:	84 30       	cpi	r24, 0x04	; 4
 910:	08 f0       	brcs	.+2      	; 0x914 <__vector_11+0x200>
 912:	5a c0       	rjmp	.+180    	; 0x9c8 <__vector_11+0x2b4>
	UEINTX = ~(1<<TXINI);
 914:	8e ef       	ldi	r24, 0xFE	; 254
 916:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UENUM = i;
 91a:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
 91e:	c3 30       	cpi	r28, 0x03	; 3
 920:	09 f4       	brne	.+2      	; 0x924 <__vector_11+0x210>
 922:	86 cf       	rjmp	.-244    	; 0x830 <__vector_11+0x11c>
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 924:	89 e1       	ldi	r24, 0x19	; 25
 926:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	01 c0       	rjmp	.+2      	; 0x932 <__vector_11+0x21e>
 930:	88 0f       	add	r24, r24
 932:	4a 95       	dec	r20
 934:	ea f7       	brpl	.-6      	; 0x930 <__vector_11+0x21c>
 936:	b6 cf       	rjmp	.-148    	; 0x8a4 <__vector_11+0x190>
		if (wIndex == KEYBOARD_INTERFACE) {
 938:	e1 14       	cp	r14, r1
 93a:	f1 04       	cpc	r15, r1
 93c:	09 f0       	breq	.+2      	; 0x940 <__vector_11+0x22c>
 93e:	48 c0       	rjmp	.+144    	; 0x9d0 <__vector_11+0x2bc>
			if (bmRequestType == 0xA1) {
 940:	d1 3a       	cpi	r29, 0xA1	; 161
				if (bRequest == HID_GET_REPORT) {
 942:	01 f5       	brne	.+64     	; 0x984 <__vector_11+0x270>
 944:	c1 30       	cpi	r28, 0x01	; 1
					usb_wait_in_ready();
 946:	89 f4       	brne	.+34     	; 0x96a <__vector_11+0x256>
 948:	cd dd       	rcall	.-1126   	; 0x4e4 <usb_wait_in_ready>
					UEDATX = keyboard_modifier_keys;
 94a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <keyboard_modifier_keys>
 94e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEDATX = 0;
 952:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					for (i=0; i<6; i++) {
 956:	e9 e0       	ldi	r30, 0x09	; 9
 958:	f1 e0       	ldi	r31, 0x01	; 1
						UEDATX = keyboard_keys[i];
 95a:	81 91       	ld	r24, Z+
 95c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					for (i=0; i<6; i++) {
 960:	41 e0       	ldi	r20, 0x01	; 1
 962:	ef 30       	cpi	r30, 0x0F	; 15
 964:	f4 07       	cpc	r31, r20
 966:	c9 f7       	brne	.-14     	; 0x95a <__vector_11+0x246>
				if (bRequest == HID_GET_IDLE) {
 968:	c1 cf       	rjmp	.-126    	; 0x8ec <__vector_11+0x1d8>
 96a:	c2 30       	cpi	r28, 0x02	; 2
					usb_wait_in_ready();
 96c:	21 f4       	brne	.+8      	; 0x976 <__vector_11+0x262>
 96e:	ba dd       	rcall	.-1164   	; 0x4e4 <usb_wait_in_ready>
					UEDATX = keyboard_idle_config;
 970:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <keyboard_idle_config>
				if (bRequest == HID_GET_PROTOCOL) {
 974:	a6 cf       	rjmp	.-180    	; 0x8c2 <__vector_11+0x1ae>
 976:	c3 30       	cpi	r28, 0x03	; 3
 978:	09 f0       	breq	.+2      	; 0x97c <__vector_11+0x268>
					usb_wait_in_ready();
 97a:	5a cf       	rjmp	.-332    	; 0x830 <__vector_11+0x11c>
 97c:	b3 dd       	rcall	.-1178   	; 0x4e4 <usb_wait_in_ready>
					UEDATX = keyboard_protocol;
 97e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <keyboard_protocol>
 982:	9f cf       	rjmp	.-194    	; 0x8c2 <__vector_11+0x1ae>
			if (bmRequestType == 0x21) {
 984:	d1 32       	cpi	r29, 0x21	; 33
 986:	09 f0       	breq	.+2      	; 0x98a <__vector_11+0x276>
 988:	53 cf       	rjmp	.-346    	; 0x830 <__vector_11+0x11c>
				if (bRequest == HID_SET_REPORT) {
 98a:	c9 30       	cpi	r28, 0x09	; 9
 98c:	61 f4       	brne	.+24     	; 0x9a6 <__vector_11+0x292>
	while (!(UEINTX & (1<<RXOUTI))) ;
 98e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 992:	82 ff       	sbrs	r24, 2
 994:	fc cf       	rjmp	.-8      	; 0x98e <__vector_11+0x27a>
					keyboard_leds = UEDATX;
 996:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 99a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <keyboard_leds>
	UEINTX = ~(1<<RXOUTI);
 99e:	8b ef       	ldi	r24, 0xFB	; 251
 9a0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	UEINTX = ~(1<<TXINI);
 9a4:	a3 cf       	rjmp	.-186    	; 0x8ec <__vector_11+0x1d8>
				if (bRequest == HID_SET_IDLE) {
 9a6:	ca 30       	cpi	r28, 0x0A	; 10
 9a8:	29 f4       	brne	.+10     	; 0x9b4 <__vector_11+0x2a0>
					keyboard_idle_config = (wValue >> 8);
 9aa:	10 93 00 01 	sts	0x0100, r17	; 0x800100 <keyboard_idle_config>
					keyboard_idle_count = 0;
 9ae:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <keyboard_idle_count>
	UEINTX = ~(1<<TXINI);
 9b2:	9c cf       	rjmp	.-200    	; 0x8ec <__vector_11+0x1d8>
				if (bRequest == HID_SET_PROTOCOL) {
 9b4:	cb 30       	cpi	r28, 0x0B	; 11
 9b6:	09 f0       	breq	.+2      	; 0x9ba <__vector_11+0x2a6>
 9b8:	3b cf       	rjmp	.-394    	; 0x830 <__vector_11+0x11c>
					keyboard_protocol = wValue;
 9ba:	00 93 01 01 	sts	0x0101, r16	; 0x800101 <keyboard_protocol>
 9be:	96 cf       	rjmp	.-212    	; 0x8ec <__vector_11+0x1d8>
						UEDATX = 0;
 9c0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					for (i = n; i; i--) {
 9c4:	91 50       	subi	r25, 0x01	; 1
 9c6:	1b c0       	rjmp	.+54     	; 0x9fe <__vector_11+0x2ea>
		if (wIndex == KEYBOARD_INTERFACE) {
 9c8:	e1 14       	cp	r14, r1
 9ca:	f1 04       	cpc	r15, r1
 9cc:	09 f4       	brne	.+2      	; 0x9d0 <__vector_11+0x2bc>
 9ce:	30 cf       	rjmp	.-416    	; 0x830 <__vector_11+0x11c>
		if (wIndex == DEBUG_INTERFACE) {
 9d0:	ea 94       	dec	r14
 9d2:	ef 28       	or	r14, r15
 9d4:	09 f0       	breq	.+2      	; 0x9d8 <__vector_11+0x2c4>
 9d6:	2c cf       	rjmp	.-424    	; 0x830 <__vector_11+0x11c>
			if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 9d8:	c1 30       	cpi	r28, 0x01	; 1
 9da:	09 f0       	breq	.+2      	; 0x9de <__vector_11+0x2ca>
 9dc:	29 cf       	rjmp	.-430    	; 0x830 <__vector_11+0x11c>
	UEINTX = ~(1<<TXINI);
 9de:	3e ef       	ldi	r19, 0xFE	; 254
			if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 9e0:	d1 3a       	cpi	r29, 0xA1	; 161
 9e2:	09 f0       	breq	.+2      	; 0x9e6 <__vector_11+0x2d2>
 9e4:	25 cf       	rjmp	.-438    	; 0x830 <__vector_11+0x11c>
						i = UEINTX;
 9e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 9ea:	98 2f       	mov	r25, r24
 9ec:	95 70       	andi	r25, 0x05	; 5
 9ee:	d9 f3       	breq	.-10     	; 0x9e6 <__vector_11+0x2d2>
					if (i & (1<<RXOUTI)) return;	// abort
 9f0:	82 fd       	sbrc	r24, 2
 9f2:	01 cf       	rjmp	.-510    	; 0x7f6 <__vector_11+0xe2>
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 9f4:	82 2f       	mov	r24, r18
 9f6:	21 32       	cpi	r18, 0x21	; 33
 9f8:	08 f0       	brcs	.+2      	; 0x9fc <__vector_11+0x2e8>
 9fa:	80 e2       	ldi	r24, 0x20	; 32
					for (i = n; i; i--) {
 9fc:	98 2f       	mov	r25, r24
 9fe:	91 11       	cpse	r25, r1
 a00:	df cf       	rjmp	.-66     	; 0x9c0 <__vector_11+0x2ac>
					len -= n;
 a02:	92 2f       	mov	r25, r18
 a04:	98 1b       	sub	r25, r24
	UEINTX = ~(1<<TXINI);
 a06:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				} while (len || n == ENDPOINT0_SIZE);
 a0a:	28 13       	cpse	r18, r24
 a0c:	03 c0       	rjmp	.+6      	; 0xa14 <__vector_11+0x300>
 a0e:	20 32       	cpi	r18, 0x20	; 32
 a10:	08 f4       	brcc	.+2      	; 0xa14 <__vector_11+0x300>
 a12:	f1 ce       	rjmp	.-542    	; 0x7f6 <__vector_11+0xe2>
				en = pgm_read_byte(cfg++);
 a14:	29 2f       	mov	r18, r25
 a16:	e7 cf       	rjmp	.-50     	; 0x9e6 <__vector_11+0x2d2>

00000a18 <print_P>:
#include <avr/pgmspace.h>

#include "print.h"

void print_P(const char *s)
{
 a18:	1f 93       	push	r17
 a1a:	cf 93       	push	r28
 a1c:	df 93       	push	r29
 a1e:	ec 01       	movw	r28, r24
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 a20:	fe 01       	movw	r30, r28
 a22:	14 91       	lpm	r17, Z
		if (!c) break;
 a24:	11 23       	and	r17, r17
 a26:	41 f0       	breq	.+16     	; 0xa38 <print_P+0x20>
		if (c == '\n') usb_debug_putchar('\r');
 a28:	1a 30       	cpi	r17, 0x0A	; 10
 a2a:	11 f4       	brne	.+4      	; 0xa30 <print_P+0x18>
 a2c:	8d e0       	ldi	r24, 0x0D	; 13
 a2e:	be dd       	rcall	.-1156   	; 0x5ac <usb_debug_putchar>
		usb_debug_putchar(c);
 a30:	81 2f       	mov	r24, r17
 a32:	bc dd       	rcall	.-1160   	; 0x5ac <usb_debug_putchar>
	while (1) {
 a34:	21 96       	adiw	r28, 0x01	; 1
		c = pgm_read_byte(s++);
 a36:	f4 cf       	rjmp	.-24     	; 0xa20 <print_P+0x8>
	}
}
 a38:	df 91       	pop	r29
 a3a:	cf 91       	pop	r28
 a3c:	1f 91       	pop	r17
 a3e:	08 95       	ret

00000a40 <phex1>:

void phex1(unsigned char c)
{
	usb_debug_putchar(c + ((c < 10) ? '0' : 'A' - 10));
 a40:	97 e3       	ldi	r25, 0x37	; 55
 a42:	8a 30       	cpi	r24, 0x0A	; 10
 a44:	08 f4       	brcc	.+2      	; 0xa48 <phex1+0x8>
 a46:	90 e3       	ldi	r25, 0x30	; 48
 a48:	89 0f       	add	r24, r25
 a4a:	b0 cd       	rjmp	.-1184   	; 0x5ac <usb_debug_putchar>

00000a4c <phex>:
}

void phex(unsigned char c)
{
 a4c:	cf 93       	push	r28
 a4e:	c8 2f       	mov	r28, r24
	phex1(c >> 4);
 a50:	82 95       	swap	r24
 a52:	8f 70       	andi	r24, 0x0F	; 15
 a54:	f5 df       	rcall	.-22     	; 0xa40 <phex1>
	phex1(c & 15);
 a56:	8c 2f       	mov	r24, r28
 a58:	8f 70       	andi	r24, 0x0F	; 15
 a5a:	cf 91       	pop	r28
 a5c:	f1 cf       	rjmp	.-30     	; 0xa40 <phex1>

00000a5e <_exit>:
 a5e:	f8 94       	cli

00000a60 <__stop_program>:
 a60:	ff cf       	rjmp	.-2      	; 0xa60 <__stop_program>
